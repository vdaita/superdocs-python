'use client';

import {
  Container,
  Button,
  Text,
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";

type Role = "assistant" | "system" | "human"

const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)

export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');

    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });

    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
          ]          
    });

    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);

    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);

    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);

    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);

    let [timerId, setTimerId] = useState<any>(-1);
    
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };

    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);

    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }

    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
         
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }

    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }

    // make selected answer more obvious

    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);

        clearInterval(timerId);
    }

    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }

      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);

      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }

    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
    
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>

                            
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>

                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}

                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>

                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
        </Container>
    )
}