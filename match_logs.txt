======SIMILARITY SCORE 320.12177272993387======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
'use client';
Stripped:  'use client';
======SIMILARITY SCORE 188.5428253615128======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
'use client';
Stripped:  'use client';
======SIMILARITY SCORE 225.27321438392218======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
'use client';
import {
Stripped:  'use client'; import {
======SIMILARITY SCORE 362.3537330433883======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
'use client';
import {
  Container,
Stripped:  'use client'; import { Container,
======SIMILARITY SCORE 317.69243087434614======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
'use client';
import {
  Container,
  Button,
Stripped:  'use client'; import { Container, Button,
======SIMILARITY SCORE 326.5277171540812======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
'use client';
import {
  Container,
  Button,
  Text,
Stripped:  'use client'; import { Container, Button, Text,
======SIMILARITY SCORE 318.97651457758013======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
'use client';
import {
  Container,
  Button,
  Text,
  VStack,
Stripped:  'use client'; import { Container, Button, Text, VStack,
======SIMILARITY SCORE 265.00009757430286======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
'use client';
import {
  Container,
  Button,
  Text,
  VStack,
  Box,
Stripped:  'use client'; import { Container, Button, Text, VStack, Box,
======SIMILARITY SCORE 325.6623806740697======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
'use client';
import {
  Container,
  Button,
  Text,
  VStack,
  Box,
  Card,
Stripped:  'use client'; import { Container, Button, Text, VStack, Box, Card,
======SIMILARITY SCORE 180.62370062370064======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
  Container,
Stripped:  import { Container,
======SIMILARITY SCORE 137.9369138959932======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
  Container,
  Button,
Stripped:  import { Container, Button,
======SIMILARITY SCORE 148.61111111111111======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
  Container,
  Button,
  Text,
Stripped:  import { Container, Button, Text,
======SIMILARITY SCORE 142.64705882352945======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
  Container,
  Button,
  Text,
  VStack,
Stripped:  import { Container, Button, Text, VStack,
======SIMILARITY SCORE 150.76687116564418======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
  Container,
  Button,
  Text,
  VStack,
  Box,
  Card,
Stripped:  import { Container, Button, Text, VStack, Box, Card,
======SIMILARITY SCORE 223.34617854849068======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
  Container,
  Button,
  Text,
  VStack,
  Box,
  Card,
  Textarea,
Stripped:  import { Container, Button, Text, VStack, Box, Card, Textarea,
======SIMILARITY SCORE 122.03972498090141======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
Stripped:  import {
======SIMILARITY SCORE 263.95703395703396======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
  Container,
Stripped:  import { Container,
======SIMILARITY SCORE 221.27024722932651======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
  Container,
  Button,
Stripped:  import { Container, Button,
======SIMILARITY SCORE 231.94444444444443======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
  Container,
  Button,
  Text,
Stripped:  import { Container, Button, Text,
======SIMILARITY SCORE 225.98039215686276======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
  Container,
  Button,
  Text,
  VStack,
Stripped:  import { Container, Button, Text, VStack,
======SIMILARITY SCORE 172.05328402164233======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
  Container,
  Button,
  Text,
  VStack,
  Box,
Stripped:  import { Container, Button, Text, VStack, Box,
======SIMILARITY SCORE 234.1002044989775======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
  Container,
  Button,
  Text,
  VStack,
  Box,
  Card,
Stripped:  import { Container, Button, Text, VStack, Box, Card,
======SIMILARITY SCORE 306.679511881824======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
  Container,
  Button,
  Text,
  VStack,
  Box,
  Card,
  Textarea,
Stripped:  import { Container, Button, Text, VStack, Box, Card, Textarea,
======SIMILARITY SCORE 296.5651277169602======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import {
  Container,
  Button,
  Text,
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
Stripped:  import { Container, Button, Text, VStack, Box, Card, Textarea, useColorModeValue
======SIMILARITY SCORE 282.5281598008871======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Container,
Stripped:  Container,
======SIMILARITY SCORE 241.84417953227808======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Container,
  Button,
Stripped:  Container, Button,
======SIMILARITY SCORE 252.88359788359787======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Container,
  Button,
  Text,
Stripped:  Container, Button, Text,
======SIMILARITY SCORE 248.56613974261035======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Container,
  Button,
  Text,
  VStack,
Stripped:  Container, Button, Text, VStack,
======SIMILARITY SCORE 194.63195914808819======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Container,
  Button,
  Text,
  VStack,
  Box,
Stripped:  Container, Button, Text, VStack, Box,
======SIMILARITY SCORE 256.8181818181818======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Container,
  Button,
  Text,
  VStack,
  Box,
  Card,
Stripped:  Container, Button, Text, VStack, Box, Card,
======SIMILARITY SCORE 329.63608207510646======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Container,
  Button,
  Text,
  VStack,
  Box,
  Card,
  Textarea,
Stripped:  Container, Button, Text, VStack, Box, Card, Textarea,
======SIMILARITY SCORE 319.73026973026975======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Container,
  Button,
  Text,
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
Stripped:  Container, Button, Text, VStack, Box, Card, Textarea, useColorModeValue
======SIMILARITY SCORE 275.0197686730195======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Container,
  Button,
  Text,
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
Stripped:  Container, Button, Text, VStack, Box, Card, Textarea, useColorModeValue } from "@chakra-ui/react";
======SIMILARITY SCORE 206.12163509471588======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Button,
Stripped:  Button,
======SIMILARITY SCORE 217.90322580645164======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Button,
  Text,
Stripped:  Button, Text,
======SIMILARITY SCORE 214.31372549019613======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Button,
  Text,
  VStack,
Stripped:  Button, Text, VStack,
======SIMILARITY SCORE 160.57452319284204======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Button,
  Text,
  VStack,
  Box,
Stripped:  Button, Text, VStack, Box,
======SIMILARITY SCORE 224.5804195804196======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Button,
  Text,
  VStack,
  Box,
  Card,
Stripped:  Button, Text, VStack, Box, Card,
======SIMILARITY SCORE 297.9738562091503======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Button,
  Text,
  VStack,
  Box,
  Card,
  Textarea,
Stripped:  Button, Text, VStack, Box, Card, Textarea,
======SIMILARITY SCORE 288.7187666135035======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Button,
  Text,
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
Stripped:  Button, Text, VStack, Box, Card, Textarea, useColorModeValue
======SIMILARITY SCORE 248.56803327391563======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Button,
  Text,
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
Stripped:  Button, Text, VStack, Box, Card, Textarea, useColorModeValue } from "@chakra-ui/react";
======SIMILARITY SCORE 297.01818181818186======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Button,
  Text,
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
Stripped:  Button, Text, VStack, Box, Card, Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react';
======SIMILARITY SCORE 215.4047976011994======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Text,
Stripped:  Text,
======SIMILARITY SCORE 214.2809999174986======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Text,
  VStack,
Stripped:  Text, VStack,
======SIMILARITY SCORE 162.3253639496831======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Text,
  VStack,
  Box,
Stripped:  Text, VStack, Box,
======SIMILARITY SCORE 226.77133655394525======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Text,
  VStack,
  Box,
  Card,
Stripped:  Text, VStack, Box, Card,
======SIMILARITY SCORE 302.0906213559887======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Text,
  VStack,
  Box,
  Card,
  Textarea,
Stripped:  Text, VStack, Box, Card, Textarea,
======SIMILARITY SCORE 296.9955624530178======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Text,
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
Stripped:  Text, VStack, Box, Card, Textarea, useColorModeValue
======SIMILARITY SCORE 256.8430026472832======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Text,
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
Stripped:  Text, VStack, Box, Card, Textarea, useColorModeValue } from "@chakra-ui/react";
======SIMILARITY SCORE 305.1383399209486======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Text,
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
Stripped:  Text, VStack, Box, Card, Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react';
======SIMILARITY SCORE 270.76947137941823======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Text,
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
Stripped:  Text, VStack, Box, Card, Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react';
======SIMILARITY SCORE 204.4267198404786======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  VStack,
Stripped:  VStack,
======SIMILARITY SCORE 152.64621033307108======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  VStack,
  Box,
Stripped:  VStack, Box,
======SIMILARITY SCORE 217.40310077519382======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  VStack,
  Box,
  Card,
Stripped:  VStack, Box, Card,
======SIMILARITY SCORE 293.1494804156674======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  VStack,
  Box,
  Card,
  Textarea,
Stripped:  VStack, Box, Card, Textarea,
======SIMILARITY SCORE 288.56977417486974======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
Stripped:  VStack, Box, Card, Textarea, useColorModeValue
======SIMILARITY SCORE 248.77664109121912======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
Stripped:  VStack, Box, Card, Textarea, useColorModeValue } from "@chakra-ui/react";
======SIMILARITY SCORE 297.4114021571649======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
Stripped:  VStack, Box, Card, Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react';
======SIMILARITY SCORE 263.0882352941177======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
Stripped:  VStack, Box, Card, Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react';
======SIMILARITY SCORE 240.7554574441992======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  VStack,
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
Stripped:  VStack, Box, Card, Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai";
======SIMILARITY SCORE 111.70980492158614======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Box,
Stripped:  Box,
======SIMILARITY SCORE 178.71900826446281======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Box,
  Card,
Stripped:  Box, Card,
======SIMILARITY SCORE 256.6928830287609======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Box,
  Card,
  Textarea,
Stripped:  Box, Card, Textarea,
======SIMILARITY SCORE 252.7760829774253======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Box,
  Card,
  Textarea,
  useColorModeValue
Stripped:  Box, Card, Textarea, useColorModeValue
======SIMILARITY SCORE 213.39126559714794======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
Stripped:  Box, Card, Textarea, useColorModeValue } from "@chakra-ui/react";
======SIMILARITY SCORE 262.36044657097295======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
Stripped:  Box, Card, Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react';
======SIMILARITY SCORE 228.03030303030306======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
Stripped:  Box, Card, Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react';
======SIMILARITY SCORE 205.6964199821343======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Box,
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
Stripped:  Box, Card, Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai";
======SIMILARITY SCORE 173.65067466266868======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Card,
Stripped:  Card,
======SIMILARITY SCORE 252.20841959972395======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Card,
  Textarea,
Stripped:  Card, Textarea,
======SIMILARITY SCORE 250.2964426877471======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Card,
  Textarea,
  useColorModeValue
Stripped:  Card, Textarea, useColorModeValue
======SIMILARITY SCORE 211.14251955549574======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
Stripped:  Card, Textarea, useColorModeValue } from "@chakra-ui/react";
======SIMILARITY SCORE 260.2740211630834======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
Stripped:  Card, Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react';
======SIMILARITY SCORE 225.9106933019977======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
Stripped:  Card, Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react';
======SIMILARITY SCORE 204.24975901130563======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
Stripped:  Card, Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai";
======SIMILARITY SCORE 203.25436084353038======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Card,
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
Stripped:  Card, Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 352.59259259259255======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Textarea,
Stripped:  Textarea,
======SIMILARITY SCORE 354.6040111257503======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Textarea,
  useColorModeValue
Stripped:  Textarea, useColorModeValue
======SIMILARITY SCORE 316.91820162408396======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
Stripped:  Textarea, useColorModeValue } from "@chakra-ui/react";
======SIMILARITY SCORE 365.91103042715946======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
Stripped:  Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react';
======SIMILARITY SCORE 331.34972917581615======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
Stripped:  Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react';
======SIMILARITY SCORE 309.5798979191205======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
Stripped:  Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai";
======SIMILARITY SCORE 179.95026828949088======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
Stripped:  Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai";
======SIMILARITY SCORE 308.4609795373316======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
Stripped:  Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 178.02619692863593======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  Textarea,
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
Stripped:  Textarea, useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 373.55925324675326======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  useColorModeValue
Stripped:  useColorModeValue
======SIMILARITY SCORE 337.0705701635493======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  useColorModeValue
} from "@chakra-ui/react";
Stripped:  useColorModeValue } from "@chakra-ui/react";
======SIMILARITY SCORE 387.06317836752623======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
Stripped:  useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react';
======SIMILARITY SCORE 353.5273368606702======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
Stripped:  useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react';
======SIMILARITY SCORE 333.2926332926333======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
Stripped:  useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai";
======SIMILARITY SCORE 203.66300366300365======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
Stripped:  useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai";
======SIMILARITY SCORE 332.68096410016017======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
Stripped:  useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 202.2461814914645======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
Stripped:  useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 332.43526734175543======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  useColorModeValue
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
Stripped:  useColorModeValue } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify(
======SIMILARITY SCORE 275.2806231981844======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
} from "@chakra-ui/react";
Stripped:  } from "@chakra-ui/react";
======SIMILARITY SCORE 330.4954304954305======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
Stripped:  } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react';
======SIMILARITY SCORE 301.0476190476191======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
Stripped:  } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react';
======SIMILARITY SCORE 280.8341114223467======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
Stripped:  } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai";
======SIMILARITY SCORE 151.2044817927171======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
Stripped:  } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai";
======SIMILARITY SCORE 280.1490683229814======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
Stripped:  } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 149.71428571428572======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
Stripped:  } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 280.46222234576567======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
Stripped:  } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify(
======SIMILARITY SCORE 218.0131362889984======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
} from "@chakra-ui/react";
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
Stripped:  } from "@chakra-ui/react"; import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{
======SIMILARITY SCORE 358.5066349772232======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import React, { useState, useEffect } from 'react'; 
Stripped:  import React, { useState, useEffect } from 'react';
======SIMILARITY SCORE 329.38205585264404======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
Stripped:  import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react';
======SIMILARITY SCORE 309.14459350991854======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
Stripped:  import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai";
======SIMILARITY SCORE 179.51496388028892======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
Stripped:  import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai";
======SIMILARITY SCORE 308.9954376399389======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
Stripped:  import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 178.56065503124324======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
Stripped:  import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 309.17410644850213======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
Stripped:  import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify(
======SIMILARITY SCORE 246.69526728836297======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
Stripped:  import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{
======SIMILARITY SCORE 322.54141966864256======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import React, { useState, useEffect } from 'react'; 
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  import React, { useState, useEffect } from 'react'; import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 330.15041633091596======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { useChat } from 'ai/react';
Stripped:  import { useChat } from 'ai/react';
======SIMILARITY SCORE 313.76510200039615======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { useChat } from 'ai/react';
import { Message } from "ai";
Stripped:  import { useChat } from 'ai/react'; import { Message } from "ai";
======SIMILARITY SCORE 184.13547237076648======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { useChat } from 'ai/react';
import { Message } from "ai";
Stripped:  import { useChat } from 'ai/react'; import { Message } from "ai";
======SIMILARITY SCORE 318.0667584759657======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
Stripped:  import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 187.63197586726997======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
Stripped:  import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 319.79323181807985======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
Stripped:  import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify(
======SIMILARITY SCORE 257.24588686049134======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
Stripped:  import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{
======SIMILARITY SCORE 334.3693298214808======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 382.4444664324939======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { useChat } from 'ai/react';
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
Stripped:  import { useChat } from 'ai/react'; import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 284.3915343915345======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { Message } from "ai";
Stripped:  import { Message } from "ai";
======SIMILARITY SCORE 154.76190476190482======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { Message } from "ai";
Stripped:  import { Message } from "ai";
======SIMILARITY SCORE 291.8762240501371======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
Stripped:  import { Message } from "ai"; type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 161.44144144144147======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
Stripped:  import { Message } from "ai"; type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 296.0124058484714======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
Stripped:  import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify(
======SIMILARITY SCORE 233.40996168582382======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
Stripped:  import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{
======SIMILARITY SCORE 311.1613876319759======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 359.22451532207634======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
Stripped:  import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 347.45670995671003======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
import { Message } from "ai";
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
Stripped:  import { Message } from "ai"; type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 157.53155680224407======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
Stripped:  type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 163.4392076502732======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
Stripped:  type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify(
======SIMILARITY SCORE 100.76038903625114======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
Stripped:  type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{
======SIMILARITY SCORE 179.7725781762519======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 227.7460646946895======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
Stripped:  type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 215.52795031055902======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
Stripped:  type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 208.1358281358281======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
Stripped:  type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 240.86489013557738======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
Stripped:  type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 110.4301075268817======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
Stripped:  type Role = "assistant" | "system" | "human"
======SIMILARITY SCORE 246.77254098360652======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
Stripped:  type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify(
======SIMILARITY SCORE 184.09372236958444======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
Stripped:  type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{
======SIMILARITY SCORE 263.1059115095852======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 311.0793980280228======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
Stripped:  type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 298.8612836438923======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
Stripped:  type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 291.4691614691614======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
Stripped:  type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 307.53968253968253======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
type Role = "assistant" | "system" | "human"
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
Stripped:  type Role = "assistant" | "system" | "human" const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 156.99788111966097======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
Stripped:  const sampleOutput = JSON.stringify(
======SIMILARITY SCORE 183.6659663865546======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 231.40887105073583======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
Stripped:  const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 218.2052604435276======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
Stripped:  const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 210.25641025641022======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
Stripped:  const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 226.05820105820106======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
Stripped:  const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 216.6109253065775======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
Stripped:  const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 272.38249650427633======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
Stripped:  const sampleOutput = JSON.stringify(
======SIMILARITY SCORE 209.68346595932803======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
  [{
Stripped:  const sampleOutput = JSON.stringify( [{
======SIMILARITY SCORE 299.05058177116996======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 346.79348643535116======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
Stripped:  const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 333.58987582814297======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
Stripped:  const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 325.6410256410256======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
Stripped:  const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 341.4428164428164======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
Stripped:  const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 331.9955406911929======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
Stripped:  const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 272.40669533208313======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
const sampleOutput = JSON.stringify(
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
Stripped:  const sampleOutput = JSON.stringify( [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 181.28342245989302======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  [{ "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 229.1219512195122======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
Stripped:  [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 217.38095238095238======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
Stripped:  [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 210.73717948717945======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
Stripped:  [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 228.27570518653323======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
Stripped:  [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 218.43412571334733======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
Stripped:  [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 158.80753896339252======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
Stripped:  [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 220.28936170212768======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  [{
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
Stripped:  [{ "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1
======SIMILARITY SCORE 300.12100211753705======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 347.9192876094472======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 336.06136615528203======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 329.3456967480736======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 346.86248215705746======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 336.9710812796367======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 277.34015656888727======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 338.8011896591169======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1
======SIMILARITY SCORE 216.04508713385246======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What are the recommended dosages for Vicodin and Percocet?",
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 },
======SIMILARITY SCORE 329.8780487804878======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
Stripped:  "answers": [
======SIMILARITY SCORE 336.4811568799299======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 336.71466763883825======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 354.3399638336347======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 344.5652173913044======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 284.85663082437276======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 346.69070398400686======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1
======SIMILARITY SCORE 223.86584946729295======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 },
======SIMILARITY SCORE 226.13154172560115======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 306.7416081186573======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "20mg of Vicodin and 30mg of Percocet",
Stripped:  "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 308.1508655279147======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 326.03922716627636======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 317.94516006348886======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 258.219981471394======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 320.0254560363238======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1
======SIMILARITY SCORE 197.18728409019536======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 },
======SIMILARITY SCORE 199.44439958006947======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 299.42774397009305======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "20mg of Vicodin and 30mg of Percocet",
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 310.0503789001312======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Varies depending on individual circumstances",
Stripped:  "Varies depending on individual circumstances",
======SIMILARITY SCORE 329.39958592132507======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Varies depending on individual circumstances",
      "No recommended dosages",
Stripped:  "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 323.0389289660103======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
Stripped:  "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 263.2248962586934======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
Stripped:  "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 324.77537175832407======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
Stripped:  "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1
======SIMILARITY SCORE 201.86640550692402======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
Stripped:  "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 },
======SIMILARITY SCORE 204.0778467908903======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
Stripped:  "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 304.2837804398772======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
Stripped:  "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 326.38489117810434======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Varies depending on individual circumstances",
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
Stripped:  "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 347.61755766136247======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No recommended dosages",
Stripped:  "No recommended dosages",
======SIMILARITY SCORE 348.0653715695344======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 288.1525066899046======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 352.6514742412788======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1
======SIMILARITY SCORE 229.62509170946447======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 },
======SIMILARITY SCORE 231.76141322338924======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 333.0235591424146======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 354.8983140087652======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 358.8014429801958======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No recommended dosages",
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always",
======SIMILARITY SCORE 311.224589047758======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "50mg of Vicodin and 60mg of Percocet"
Stripped:  "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 252.71646859083188======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "50mg of Vicodin and 60mg of Percocet"
    ],
Stripped:  "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 318.3899464974493======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
Stripped:  "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1
======SIMILARITY SCORE 195.40229885057474======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
Stripped:  "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 },
======SIMILARITY SCORE 197.56493506493507======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
Stripped:  "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 304.75421863536315======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
Stripped:  "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 326.573564122738======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
Stripped:  "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 330.4182509505703======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
Stripped:  "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always",
======SIMILARITY SCORE 361.5436467812605======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "50mg of Vicodin and 60mg of Percocet"
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
Stripped:  "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never",
======SIMILARITY SCORE 129.03225806451613======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
Stripped:  ],
======SIMILARITY SCORE 208.15602836879432======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 1
Stripped:  ], "correctAnswer": 1
======SIMILARITY SCORE 208.12807881773398======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
Stripped:  ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 229.57171198506245======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
Stripped:  ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 233.03571428571428======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
Stripped:  ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always",
======SIMILARITY SCORE 263.78176822686686======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
Stripped:  ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never",
======SIMILARITY SCORE 235.59732472324725======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
Stripped:  ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision",
======SIMILARITY SCORE 366.4383621101244======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
Stripped:  "correctAnswer": 1
======SIMILARITY SCORE 245.0420722653028======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  },
Stripped:  "correctAnswer": 1 },
======SIMILARITY SCORE 248.72629334530356======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  },
  {
Stripped:  "correctAnswer": 1 }, {
======SIMILARITY SCORE 366.577959997367======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
Stripped:  "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 387.96814437229705======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
Stripped:  "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 391.3788997380328======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
Stripped:  "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always",
======SIMILARITY SCORE 422.0768080009206======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
Stripped:  "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never",
======SIMILARITY SCORE 393.85555773762763======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
Stripped:  "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision",
======SIMILARITY SCORE 402.25279106858056======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
Stripped:  "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 202.29885057471265======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
Stripped:  }, { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 223.99895656710578======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
Stripped:  }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 227.72277227722773======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
Stripped:  }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always",
======SIMILARITY SCORE 262.3255813953489======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
Stripped:  }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never",
======SIMILARITY SCORE 234.45030120481928======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
Stripped:  }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision",
======SIMILARITY SCORE 243.70015948963317======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
Stripped:  }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 160.28225806451613======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  },
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
Stripped:  }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ],
======SIMILARITY SCORE 202.82314982859447======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "Can Vicodin and Percocet be taken together?",
Stripped:  { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 224.46977730646873======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
Stripped:  { "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 228.14070351758795======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
Stripped:  { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always",
======SIMILARITY SCORE 262.74681878016673======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
Stripped:  { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never",
======SIMILARITY SCORE 234.8323170731707======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
Stripped:  { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision",
======SIMILARITY SCORE 244.0361057382334======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
Stripped:  { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 160.61120543293717======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
Stripped:  { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ],
======SIMILARITY SCORE 223.72620380739082======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
Stripped:  { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3
======SIMILARITY SCORE 304.56369448411897======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "Can Vicodin and Percocet be taken together?",
Stripped:  "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 327.35638345394443======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 330.99049850318886======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always",
======SIMILARITY SCORE 365.59843257517684======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never",
======SIMILARITY SCORE 337.6563156788567======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision",
======SIMILARITY SCORE 346.8281718281719======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 263.39848076996145======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ],
======SIMILARITY SCORE 326.50379539205807======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3
======SIMILARITY SCORE 203.66076734646555======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "Can Vicodin and Percocet be taken together?",
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 },
======SIMILARITY SCORE 329.8780487804878======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
Stripped:  "answers": [
======SIMILARITY SCORE 343.84057971014494======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "Yes, always",
Stripped:  "answers": [ "Yes, always",
======SIMILARITY SCORE 381.3991991375327======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "Yes, always",
      "No, never",
Stripped:  "answers": [ "Yes, always", "No, never",
======SIMILARITY SCORE 357.31418918918916======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
Stripped:  "answers": [ "Yes, always", "No, never", "Only under medical supervision",
======SIMILARITY SCORE 371.51035239270533======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
Stripped:  "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 287.96082949308754======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
Stripped:  "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ],
======SIMILARITY SCORE 351.05726293669557======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
Stripped:  "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3
======SIMILARITY SCORE 228.11185870479397======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
Stripped:  "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 },
======SIMILARITY SCORE 230.29953917050693======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
Stripped:  "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, {
======SIMILARITY SCORE 266.7555555555556======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Yes, always",
Stripped:  "Yes, always",
======SIMILARITY SCORE 306.95427480058424======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Yes, always",
      "No, never",
Stripped:  "Yes, always", "No, never",
======SIMILARITY SCORE 286.5875322997416======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Yes, always",
      "No, never",
      "Only under medical supervision",
Stripped:  "Yes, always", "No, never", "Only under medical supervision",
======SIMILARITY SCORE 301.33061383061386======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
Stripped:  "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 217.76316907030866======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
Stripped:  "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ],
======SIMILARITY SCORE 280.9579607359441======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
Stripped:  "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3
======SIMILARITY SCORE 157.99746764672034======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
Stripped:  "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 },
======SIMILARITY SCORE 160.17561634582916======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
Stripped:  "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, {
======SIMILARITY SCORE 200.4138695815759======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Yes, always",
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 330.54953121350644======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No, never",
Stripped:  "No, never",
======SIMILARITY SCORE 319.3857718246535======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No, never",
      "Only under medical supervision",
Stripped:  "No, never", "Only under medical supervision",
======SIMILARITY SCORE 335.58966686062087======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
Stripped:  "No, never", "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 251.96142973318362======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
Stripped:  "No, never", "Only under medical supervision", "Depends on the specific situation" ],
======SIMILARITY SCORE 315.0734930290771======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
Stripped:  "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3
======SIMILARITY SCORE 192.06319668012736======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
Stripped:  "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 },
======SIMILARITY SCORE 194.20932009167308======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
Stripped:  "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, {
======SIMILARITY SCORE 233.7591390558269======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 312.8016897816037======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No, never",
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
Stripped:  "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 319.0340909090909======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Only under medical supervision",
Stripped:  "Only under medical supervision",
======SIMILARITY SCORE 337.47474747474746======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Only under medical supervision",
      "Depends on the specific situation"
Stripped:  "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 253.82113039437203======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
Stripped:  "Only under medical supervision", "Depends on the specific situation" ],
======SIMILARITY SCORE 317.0519179577532======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
Stripped:  "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3
======SIMILARITY SCORE 194.02094961388485======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
Stripped:  "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 },
======SIMILARITY SCORE 196.15408745843527======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
Stripped:  "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, {
======SIMILARITY SCORE 237.57704532284404======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 316.57859256087977======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
Stripped:  "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 326.60564263322885======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Only under medical supervision",
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
Stripped:  "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions",
======SIMILARITY SCORE 343.4117672762229======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Depends on the specific situation"
Stripped:  "Depends on the specific situation"
======SIMILARITY SCORE 261.1410535431456======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Depends on the specific situation"
    ],
Stripped:  "Depends on the specific situation" ],
======SIMILARITY SCORE 328.89537673972166======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
Stripped:  "Depends on the specific situation" ], "correctAnswer": 3
======SIMILARITY SCORE 205.80762250453722======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
Stripped:  "Depends on the specific situation" ], "correctAnswer": 3 },
======SIMILARITY SCORE 207.90560215567822======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
Stripped:  "Depends on the specific situation" ], "correctAnswer": 3 }, {
======SIMILARITY SCORE 254.05885681946805======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 332.9729685391692======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
Stripped:  "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 342.65824334321496======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
Stripped:  "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions",
======SIMILARITY SCORE 324.0627366943156======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Depends on the specific situation"
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
Stripped:  "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 129.03225806451613======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
Stripped:  ],
======SIMILARITY SCORE 208.15602836879432======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 3
Stripped:  ], "correctAnswer": 3
======SIMILARITY SCORE 149.46236559139788======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 228.33494760940388======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
Stripped:  ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 237.7162238552855======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
Stripped:  ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions",
======SIMILARITY SCORE 218.98861612328662======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
Stripped:  ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 231.5857412372158======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
Stripped:  ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 366.4383621101244======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 3
Stripped:  "correctAnswer": 3
======SIMILARITY SCORE 245.0420722653028======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 3
  },
Stripped:  "correctAnswer": 3 },
======SIMILARITY SCORE 248.72629334530356======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 3
  },
  {
Stripped:  "correctAnswer": 3 }, {
======SIMILARITY SCORE 307.74024419595526======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 386.59333039738385======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
Stripped:  "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 395.9171163808128======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
Stripped:  "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions",
======SIMILARITY SCORE 377.1417294995025======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
Stripped:  "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 389.70654865391714======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
Stripped:  "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 367.22807017543863======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 3
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
Stripped:  "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 148.36043721674224======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 227.27881396461024======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
Stripped:  }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 236.57853052272455======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
Stripped:  }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions",
======SIMILARITY SCORE 219.15860814943386======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
Stripped:  }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 231.62393162393167======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
Stripped:  }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 209.05511811023626======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
Stripped:  }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 154.55309139784947======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  },
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
Stripped:  }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ],
======SIMILARITY SCORE 148.76501552166286======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 227.66163375919473======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 236.89655172413796======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions",
======SIMILARITY SCORE 219.4361027694361======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 231.86462324393364======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 209.2592592592593======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 154.75404284141902======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ],
======SIMILARITY SCORE 217.98936170212767======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  {
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1
======SIMILARITY SCORE 224.3828904165525======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 303.2644169729369======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 312.4548448156921======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions",
======SIMILARITY SCORE 294.9664375513095======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 307.36986887909376======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 284.7396288739921======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 230.23224360685902======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ],
======SIMILARITY SCORE 293.46499328469804======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1
======SIMILARITY SCORE 170.7418982067741======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }]
======SIMILARITY SCORE 329.8780487804878======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
Stripped:  "answers": [
======SIMILARITY SCORE 358.3866179493035======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "No risks or interactions",
Stripped:  "answers": [ "No risks or interactions",
======SIMILARITY SCORE 345.984060984061======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
Stripped:  "answers": [ "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 361.5804160324709======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
Stripped:  "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 341.26506024096386======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
Stripped:  "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 286.57194060419863======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
Stripped:  "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ],
======SIMILARITY SCORE 350.4377011855225======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
Stripped:  "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1
======SIMILARITY SCORE 227.54215957714575======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
Stripped:  "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }]
======SIMILARITY SCORE 197.5195094760312======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "answers": [
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
Stripped:  "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }] )
======SIMILARITY SCORE 355.4324878377139======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No risks or interactions",
Stripped:  "No risks or interactions",
======SIMILARITY SCORE 343.5063006491578======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No risks or interactions",
      "Increased risk of respiratory depression",
Stripped:  "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 359.16239203340456======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
Stripped:  "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 338.83316038279725======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
Stripped:  "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 284.11722091995125======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
Stripped:  "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ],
======SIMILARITY SCORE 348.0468684257474======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
Stripped:  "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1
======SIMILARITY SCORE 225.13097192900153======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
Stripped:  "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }]
======SIMILARITY SCORE 195.13105037276682======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
Stripped:  "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }] )
======SIMILARITY SCORE 156.6695119112284======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "No risks or interactions",
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
Stripped:  "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }] )
======SIMILARITY SCORE 354.9234549234549======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Increased risk of respiratory depression",
Stripped:  "Increased risk of respiratory depression",
======SIMILARITY SCORE 373.62591632254555======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 353.52564102564105======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 298.77341737913514======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ],
======SIMILARITY SCORE 363.863943641927======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1
======SIMILARITY SCORE 240.9034505527032======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }]
======SIMILARITY SCORE 210.96563011456624======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }] )
======SIMILARITY SCORE 172.5040916530278======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }] )
======SIMILARITY SCORE 313.99562937062933======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Increased risk of respiratory depression",
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
export default function PatientView() {
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }] ) export default function PatientView() {
======SIMILARITY SCORE 311.99557766721955======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Enhanced pain relief",
Stripped:  "Enhanced pain relief",
======SIMILARITY SCORE 297.8319783197833======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Enhanced pain relief",
      "Improved overall well-being"
Stripped:  "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 244.2684523426266======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
Stripped:  "Enhanced pain relief", "Improved overall well-being" ],
======SIMILARITY SCORE 310.485777472737======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
Stripped:  "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1
======SIMILARITY SCORE 187.4840357598979======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
Stripped:  "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }]
======SIMILARITY SCORE 157.7169194970242======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
Stripped:  "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }] )
======SIMILARITY SCORE 119.25538103548577======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
Stripped:  "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }] )
======SIMILARITY SCORE 262.4143217893218======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
export default function PatientView() {
Stripped:  "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }] ) export default function PatientView() {
======SIMILARITY SCORE 296.00558171986745======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Enhanced pain relief",
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
Stripped:  "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }] ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600');
======SIMILARITY SCORE 302.8011204481793======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Improved overall well-being"
Stripped:  "Improved overall well-being"
======SIMILARITY SCORE 249.449096128413======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Improved overall well-being"
    ],
Stripped:  "Improved overall well-being" ],
======SIMILARITY SCORE 316.68907121556265======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Improved overall well-being"
    ],
    "correctAnswer": 1
Stripped:  "Improved overall well-being" ], "correctAnswer": 1
======SIMILARITY SCORE 193.67139959432052======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
Stripped:  "Improved overall well-being" ], "correctAnswer": 1 }]
======SIMILARITY SCORE 164.04566432745366======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
Stripped:  "Improved overall well-being" ], "correctAnswer": 1 }] )
======SIMILARITY SCORE 125.58412586591521======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
Stripped:  "Improved overall well-being" ], "correctAnswer": 1 }] )
======SIMILARITY SCORE 273.44682438192666======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
export default function PatientView() {
Stripped:  "Improved overall well-being" ], "correctAnswer": 1 }] ) export default function PatientView() {
======SIMILARITY SCORE 307.9374655845244======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
Stripped:  "Improved overall well-being" ], "correctAnswer": 1 }] ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600');
======SIMILARITY SCORE 132.11328976034858======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      "Improved overall well-being"
    ],
    "correctAnswer": 1
  }]
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
Stripped:  "Improved overall well-being" ], "correctAnswer": 1 }] ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600');
======SIMILARITY SCORE 129.03225806451613======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
Stripped:  ],
======SIMILARITY SCORE 208.15602836879432======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 1
Stripped:  ], "correctAnswer": 1
======SIMILARITY SCORE 177.91313559322035======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 1
  }]
)
export default function PatientView() {
Stripped:  ], "correctAnswer": 1 }] ) export default function PatientView() {
======SIMILARITY SCORE 211.65750915750914======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 1
  }]
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
Stripped:  ], "correctAnswer": 1 }] ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600');
======SIMILARITY SCORE 199.53748782862704======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    ],
    "correctAnswer": 1
  }]
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
Stripped:  ], "correctAnswer": 1 }] ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({
======SIMILARITY SCORE 366.4383621101244======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
Stripped:  "correctAnswer": 1
======SIMILARITY SCORE 245.0420722653028======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  }]
Stripped:  "correctAnswer": 1 }]
======SIMILARITY SCORE 217.25179769170342======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  }]
)
Stripped:  "correctAnswer": 1 }] )
======SIMILARITY SCORE 178.79025923016496======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  }]
)
Stripped:  "correctAnswer": 1 }] )
======SIMILARITY SCORE 336.45077132486387======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  }]
)
export default function PatientView() {
Stripped:  "correctAnswer": 1 }] ) export default function PatientView() {
======SIMILARITY SCORE 370.0058324975047======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  }]
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
Stripped:  "correctAnswer": 1 }] ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600');
======SIMILARITY SCORE 194.1816566733289======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  }]
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
Stripped:  "correctAnswer": 1 }] ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600');
======SIMILARITY SCORE 357.7780005432603======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  }]
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
Stripped:  "correctAnswer": 1 }] ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({
======SIMILARITY SCORE 362.65295734500666======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    "correctAnswer": 1
  }]
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
Stripped:  "correctAnswer": 1 }] ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm",
======SIMILARITY SCORE 171.59274193548387======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  }]
)
export default function PatientView() {
Stripped:  }] ) export default function PatientView() {
======SIMILARITY SCORE 209.76912995261617======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  }]
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
Stripped:  }] ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600');
======SIMILARITY SCORE 199.5159602302459======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  }]
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
Stripped:  }] ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({
======SIMILARITY SCORE 204.29636724362047======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  }]
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
Stripped:  }] ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm",
======SIMILARITY SCORE 237.41496598639455======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
  }]
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
Stripped:  }] ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [
======SIMILARITY SCORE 229.71168730650157======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
)
export default function PatientView() {
Stripped:  ) export default function PatientView() {
======SIMILARITY SCORE 269.06630988710333======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
Stripped:  ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600');
======SIMILARITY SCORE 258.71118471179113======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
Stripped:  ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({
======SIMILARITY SCORE 263.45187978479595======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
Stripped:  ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm",
======SIMILARITY SCORE 296.5443057957128======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
Stripped:  ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [
======SIMILARITY SCORE 327.5522975147506======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
)
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
Stripped:  ) export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ {
======SIMILARITY SCORE 171.29166666666666======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
Stripped:  export default function PatientView() {
======SIMILARITY SCORE 210.56595986173448======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
Stripped:  export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600');
======SIMILARITY SCORE 200.13973915357994======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
Stripped:  export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({
======SIMILARITY SCORE 204.85328883326383======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
Stripped:  export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm",
======SIMILARITY SCORE 237.92778649921505======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
Stripped:  export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [
======SIMILARITY SCORE 268.93326137794566======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
Stripped:  export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ {
======SIMILARITY SCORE 292.6530612244898======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
Stripped:  export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ { role: "system",
======SIMILARITY SCORE 316.7462121212121======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
Stripped:  export default function PatientView() {
======SIMILARITY SCORE 356.0205053162799======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
Stripped:  export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600');
======SIMILARITY SCORE 180.19632949210413======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
Stripped:  export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600');
======SIMILARITY SCORE 345.59428460812535======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
Stripped:  export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({
======SIMILARITY SCORE 350.30783428780927======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
Stripped:  export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm",
======SIMILARITY SCORE 383.3823319537605======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
Stripped:  export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [
======SIMILARITY SCORE 414.3878068324911======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
Stripped:  export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ {
======SIMILARITY SCORE 438.10760667903526======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
Stripped:  export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ { role: "system",
======SIMILARITY SCORE 217.50725003152183======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
export default function PatientView() {
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
Stripped:  export default function PatientView() { const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
======SIMILARITY SCORE 340.0283207557985======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const borderColor = useColorModeValue('gray.200', 'gray.600');
Stripped:  const borderColor = useColorModeValue('gray.200', 'gray.600');
======SIMILARITY SCORE 164.20414493162272======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const borderColor = useColorModeValue('gray.200', 'gray.600');
Stripped:  const borderColor = useColorModeValue('gray.200', 'gray.600');
======SIMILARITY SCORE 334.5556710896117======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
Stripped:  const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({
======SIMILARITY SCORE 338.94557358627503======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
Stripped:  const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm",
======SIMILARITY SCORE 371.91218464279166======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
Stripped:  const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [
======SIMILARITY SCORE 402.88993646238987======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
Stripped:  const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ {
======SIMILARITY SCORE 426.489575786847======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
Stripped:  const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ { role: "system",
======SIMILARITY SCORE 207.14364696788405======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
Stripped:  const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
======SIMILARITY SCORE 388.44361143308095======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const borderColor = useColorModeValue('gray.200', 'gray.600');
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
Stripped:  const borderColor = useColorModeValue('gray.200', 'gray.600'); const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10"
======SIMILARITY SCORE 198.94540942928035======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({
======SIMILARITY SCORE 202.7250812283828======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm",
======SIMILARITY SCORE 235.61316418459273======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [
======SIMILARITY SCORE 266.5441176470588======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ {
======SIMILARITY SCORE 292.5======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ { role: "system",
======SIMILARITY SCORE 256.1626052446126======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10"
======SIMILARITY SCORE 252.06349206349208======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" },
======SIMILARITY SCORE 283.1559357450698======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({
======SIMILARITY SCORE 286.9356075441723======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm",
======SIMILARITY SCORE 319.8236905003822======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [
======SIMILARITY SCORE 350.75464396284826======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ {
======SIMILARITY SCORE 376.7105263157895======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ { role: "system",
======SIMILARITY SCORE 159.1296201669221======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
======SIMILARITY SCORE 340.37313156040204======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10"
======SIMILARITY SCORE 336.27401837928153======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" },
======SIMILARITY SCORE 342.92236548183564======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const {messages, input, reload, append, isLoading, setMessages} = useChat({
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
Stripped:  const {messages, input, reload, append, isLoading, setMessages} = useChat({ api: "/api/llm", initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, {
======SIMILARITY SCORE 181.23638800469092======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      api: "/api/llm",
Stripped:  api: "/api/llm",
======SIMILARITY SCORE 223.25971484484202======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      api: "/api/llm",
      initialMessages: [
Stripped:  api: "/api/llm", initialMessages: [
======SIMILARITY SCORE 254.21303656597772======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      api: "/api/llm",
      initialMessages: [
        {
Stripped:  api: "/api/llm", initialMessages: [ {
======SIMILARITY SCORE 286.8292682926829======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
Stripped:  api: "/api/llm", initialMessages: [ { role: "system",
======SIMILARITY SCORE 258.69244080530115======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
Stripped:  api: "/api/llm", initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10"
======SIMILARITY SCORE 254.56420835482209======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
Stripped:  api: "/api/llm", initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" },
======SIMILARITY SCORE 261.1933982225984======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
Stripped:  api: "/api/llm", initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, {
======SIMILARITY SCORE 285.5244755244755======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      api: "/api/llm",
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
Stripped:  api: "/api/llm", initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system",
======SIMILARITY SCORE 319.58550862205345======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      initialMessages: [
Stripped:  initialMessages: [
======SIMILARITY SCORE 352.0880107768298======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      initialMessages: [
        {
Stripped:  initialMessages: [ {
======SIMILARITY SCORE 387.21088435374145======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      initialMessages: [
        {
          role: "system",
Stripped:  initialMessages: [ { role: "system",
======SIMILARITY SCORE 178.39944521497915======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
Stripped:  initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
======SIMILARITY SCORE 359.52443166971517======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
Stripped:  initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10"
======SIMILARITY SCORE 355.3870710295291======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
Stripped:  initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" },
======SIMILARITY SCORE 362.0102586489141======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
Stripped:  initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, {
======SIMILARITY SCORE 386.3063063063063======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
Stripped:  initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system",
======SIMILARITY SCORE 244.4233703945934======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      initialMessages: [
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
Stripped:  initialMessages: [ { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
======SIMILARITY SCORE 235.2941176470588======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
Stripped:  {
======SIMILARITY SCORE 275.625======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
          role: "system",
Stripped:  { role: "system",
======SIMILARITY SCORE 260.1309550688643======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
Stripped:  { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10"
======SIMILARITY SCORE 255.98455598455598======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
Stripped:  { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" },
======SIMILARITY SCORE 262.6018099547511======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
Stripped:  { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, {
======SIMILARITY SCORE 286.86567164179104======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
Stripped:  { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system",
======SIMILARITY SCORE 144.76705686932516======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
Stripped:  { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
======SIMILARITY SCORE 254.7119856887299======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
Stripped:  { role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20"
======SIMILARITY SCORE 371.8466898954704======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
Stripped:  role: "system",
======SIMILARITY SCORE 176.706452570767======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
Stripped:  role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
======SIMILARITY SCORE 357.799427035478======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
Stripped:  role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10"
======SIMILARITY SCORE 353.6517840261459======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
Stripped:  role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" },
======SIMILARITY SCORE 360.2682206699423======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
Stripped:  role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, {
======SIMILARITY SCORE 384.52726774458756======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
Stripped:  role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system",
======SIMILARITY SCORE 242.398345150743======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
Stripped:  role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
======SIMILARITY SCORE 352.34133736686204======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
Stripped:  role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20"
======SIMILARITY SCORE 355.008939410661======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
Stripped:  role: "system", content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" }
======SIMILARITY SCORE 109.02623724896317======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
Stripped:  content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
======SIMILARITY SCORE 290.10141407043454======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
Stripped:  content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10"
======SIMILARITY SCORE 285.94810350939383======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
Stripped:  content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" },
======SIMILARITY SCORE 292.56083242566154======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
Stripped:  content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, {
======SIMILARITY SCORE 316.8037019649923======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
Stripped:  content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system",
======SIMILARITY SCORE 174.55074332370612======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
Stripped:  content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
======SIMILARITY SCORE 284.48671320702624======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
Stripped:  content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20"
======SIMILARITY SCORE 287.1528115124689======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
Stripped:  content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" }
======SIMILARITY SCORE 233.57287873416908======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.",
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
Stripped:  content: "You are an intelligent medical quiz generator. For the given medications and dosages that are provided, generate a set of questions to ask patients to make sure they understand how to use their medication. Ask at most 10 questions. Make sure that the information is according the medication and dosages inputted and nothing else. Use the provided format for output.", id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ],
======SIMILARITY SCORE 237.60015634160644======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "10"
Stripped:  id: "10"
======SIMILARITY SCORE 235.12880562060892======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "10"
        },
Stripped:  id: "10" },
======SIMILARITY SCORE 243.35863377609107======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "10"
        },
        {
Stripped:  id: "10" }, {
======SIMILARITY SCORE 280.0======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "10"
        },
        {
          role: "system",
Stripped:  id: "10" }, { role: "system",
======SIMILARITY SCORE 150.8735868448099======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
Stripped:  id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
======SIMILARITY SCORE 260.90459622779713======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
Stripped:  id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20"
======SIMILARITY SCORE 263.4191176470588======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
Stripped:  id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" }
======SIMILARITY SCORE 209.61740961740963======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
Stripped:  id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ],
======SIMILARITY SCORE 224.06085797192378======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "10"
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
Stripped:  id: "10" }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message)
======SIMILARITY SCORE 228.57142857142858======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        },
Stripped:  },
======SIMILARITY SCORE 237.03324808184144======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        },
        {
Stripped:  }, {
======SIMILARITY SCORE 276.793893129771======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        },
        {
          role: "system",
Stripped:  }, { role: "system",
======SIMILARITY SCORE 151.96317522253383======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
Stripped:  }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
======SIMILARITY SCORE 261.94589463692455======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
Stripped:  }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20"
======SIMILARITY SCORE 264.443915217909======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
Stripped:  }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" }
======SIMILARITY SCORE 210.61818181818185======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
Stripped:  }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ],
======SIMILARITY SCORE 224.92327572282346======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
Stripped:  }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message)
======SIMILARITY SCORE 217.5653594771242======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        },
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
Stripped:  }, { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message) });
======SIMILARITY SCORE 235.2941176470588======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
Stripped:  {
======SIMILARITY SCORE 275.625======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
          role: "system",
Stripped:  { role: "system",
======SIMILARITY SCORE 152.34507672831694======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
Stripped:  { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
======SIMILARITY SCORE 262.3102056505862======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
Stripped:  { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20"
======SIMILARITY SCORE 264.8023143683703======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
Stripped:  { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" }
======SIMILARITY SCORE 210.96797938903205======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
Stripped:  { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ],
======SIMILARITY SCORE 225.22228566767274======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
Stripped:  { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message)
======SIMILARITY SCORE 217.86303630363037======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        {
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
Stripped:  { role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message) });
======SIMILARITY SCORE 371.8466898954704======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
Stripped:  role: "system",
======SIMILARITY SCORE 250.1661641861677======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
Stripped:  role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
======SIMILARITY SCORE 360.1191151446398======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
Stripped:  role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20"
======SIMILARITY SCORE 362.60715937251734======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
Stripped:  role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" }
======SIMILARITY SCORE 308.76691252997875======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
Stripped:  role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ],
======SIMILARITY SCORE 322.98595713229855======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
Stripped:  role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message)
======SIMILARITY SCORE 315.62575966291223======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
Stripped:  role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message) });
======SIMILARITY SCORE 128.12575966291223======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
Stripped:  role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message) });
======SIMILARITY SCORE 332.434925189588======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: "system",
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
Stripped:  role: "system", content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState("");
======SIMILARITY SCORE 214.5382942304475======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
Stripped:  content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
======SIMILARITY SCORE 324.45374393048814======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
Stripped:  content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20"
======SIMILARITY SCORE 326.9210747607416======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
Stripped:  content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" }
======SIMILARITY SCORE 273.0509665007482======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
Stripped:  content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ],
======SIMILARITY SCORE 287.2653949643794======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
Stripped:  content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message)
======SIMILARITY SCORE 279.91565452091766======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
Stripped:  content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message) });
======SIMILARITY SCORE 297.3504989634022======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
Stripped:  content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState("");
======SIMILARITY SCORE 309.8198182423086======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``,
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
Stripped:  content: `Format your output as a list of JSON arrays like so: \`\`\`json \n ${sampleOutput} \n \`\`\``, id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({
======SIMILARITY SCORE 237.60015634160644======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "20"
Stripped:  id: "20"
======SIMILARITY SCORE 241.9056878949927======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "20"
        }
Stripped:  id: "20" }
======SIMILARITY SCORE 189.8826979472141======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "20"
        }
      ],
Stripped:  id: "20" } ],
======SIMILARITY SCORE 228.07649667405767======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
Stripped:  id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message)
======SIMILARITY SCORE 220.83333333333334======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
Stripped:  id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message) });
======SIMILARITY SCORE 240.51654560129137======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
Stripped:  id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState("");
======SIMILARITY SCORE 252.04834405901744======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
Stripped:  id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({
======SIMILARITY SCORE 278.9272030651341======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: "20"
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
Stripped:  id: "20" } ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [
======SIMILARITY SCORE 235.2941176470588======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        }
Stripped:  }
======SIMILARITY SCORE 183.55731225296446======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        }
      ],
Stripped:  } ],
======SIMILARITY SCORE 229.8524901416679======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
Stripped:  } ], onFinish: (message) => finishedLoadingQuiz(message)
======SIMILARITY SCORE 222.58771929824562======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
Stripped:  } ], onFinish: (message) => finishedLoadingQuiz(message) });
======SIMILARITY SCORE 242.02852947346338======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
Stripped:  } ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState("");
======SIMILARITY SCORE 253.21219987021416======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
Stripped:  } ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({
======SIMILARITY SCORE 280.0316330565441======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
Stripped:  } ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [
======SIMILARITY SCORE 272.17779430909434======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        }
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
Stripped:  } ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ {
======SIMILARITY SCORE 181.81818181818184======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      ],
Stripped:  ],
======SIMILARITY SCORE 230.27346637102735======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
Stripped:  ], onFinish: (message) => finishedLoadingQuiz(message)
======SIMILARITY SCORE 223.00295857988166======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
Stripped:  ], onFinish: (message) => finishedLoadingQuiz(message) });
======SIMILARITY SCORE 242.38095238095238======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
Stripped:  ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState("");
======SIMILARITY SCORE 253.48152991173586======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
Stripped:  ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({
======SIMILARITY SCORE 280.2867383512545======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
Stripped:  ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [
======SIMILARITY SCORE 272.42929387525754======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
Stripped:  ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ {
======SIMILARITY SCORE 182.77162977867206======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      ],
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  ], onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 326.81483131421874======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      onFinish: (message) => finishedLoadingQuiz(message)
Stripped:  onFinish: (message) => finishedLoadingQuiz(message)
======SIMILARITY SCORE 319.53498927215713======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      onFinish: (message) => finishedLoadingQuiz(message)
    });
Stripped:  onFinish: (message) => finishedLoadingQuiz(message) });
======SIMILARITY SCORE 132.03498927215713======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      onFinish: (message) => finishedLoadingQuiz(message)
    });
Stripped:  onFinish: (message) => finishedLoadingQuiz(message) });
======SIMILARITY SCORE 338.81190388039704======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
Stripped:  onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState("");
======SIMILARITY SCORE 349.7836164474146======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
Stripped:  onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({
======SIMILARITY SCORE 376.56673946131957======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
Stripped:  onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [
======SIMILARITY SCORE 368.70373924364475======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
Stripped:  onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ {
======SIMILARITY SCORE 278.9261252446184======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 382.0252484555466======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      onFinish: (message) => finishedLoadingQuiz(message)
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
Stripped:  onFinish: (message) => finishedLoadingQuiz(message) }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 277.965293668955======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
Stripped:  });
======SIMILARITY SCORE 324.63159176714163======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
    let [medicationInfo, setMedicationInfo] = useState("");
Stripped:  }); let [medicationInfo, setMedicationInfo] = useState("");
======SIMILARITY SCORE 341.3146507315063======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
Stripped:  }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({
======SIMILARITY SCORE 368.0081090407177======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
Stripped:  }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [
======SIMILARITY SCORE 360.0818128429963======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
Stripped:  }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ {
======SIMILARITY SCORE 272.7422360248447======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 375.7242972199298======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
Stripped:  }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 280.6179948269491======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
Stripped:  }); let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 237.32071141709696======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
Stripped:  let [medicationInfo, setMedicationInfo] = useState("");
======SIMILARITY SCORE 255.07246376811594======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({
======SIMILARITY SCORE 281.7171717171717======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [
======SIMILARITY SCORE 273.77904220009486======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ {
======SIMILARITY SCORE 186.24517374517376======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 289.2061679040548======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 194.01862464183378======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 212.04488207007103======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 370.65404475043033======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
Stripped:  let [medicationInfo, setMedicationInfo] = useState("");
======SIMILARITY SCORE 388.40579710144937======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({
======SIMILARITY SCORE 415.0505050505051======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [
======SIMILARITY SCORE 407.11237553342824======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ {
======SIMILARITY SCORE 319.57850707850713======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 422.5395012373882======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 327.3519579751671======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 345.3782154034044======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 359.14463786804214======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [medicationInfo, setMedicationInfo] = useState("");
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
Stripped:  let [medicationInfo, setMedicationInfo] = useState(""); let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 347.85488050676645======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizData, setQuizData] = useState({
Stripped:  let [quizData, setQuizData] = useState({
======SIMILARITY SCORE 377.3712737127371======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizData, setQuizData] = useState({
        questions: [
Stripped:  let [quizData, setQuizData] = useState({ questions: [
======SIMILARITY SCORE 369.37222574508564======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizData, setQuizData] = useState({
        questions: [
            {
Stripped:  let [quizData, setQuizData] = useState({ questions: [ {
======SIMILARITY SCORE 287.6190476190476======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 390.47508331395795======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
Stripped:  let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 294.5819112627986======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
Stripped:  let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 312.316715542522======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
Stripped:  let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 325.85253075716287======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
Stripped:  let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 291.6505580844297======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizData, setQuizData] = useState({
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
Stripped:  let [quizData, setQuizData] = useState({ questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 368.5636856368564======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        questions: [
Stripped:  questions: [
======SIMILARITY SCORE 360.753216374269======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        questions: [
            {
Stripped:  questions: [ {
======SIMILARITY SCORE 299.0777299194385======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 401.86212849919843======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
Stripped:  questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 306.1507936507936======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
Stripped:  questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 324.2626262626263======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
Stripped:  questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 339.36915163909026======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
Stripped:  questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 305.257114232318======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
Stripped:  questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 359.97113232001885======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        questions: [
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
Stripped:  questions: [ { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 236.84210526315792======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
Stripped:  {
======SIMILARITY SCORE 186.19431643625194======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  { "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 289.0728150556705======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
Stripped:  { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 194.2991631799163======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
Stripped:  { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 213.17706683560345======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
Stripped:  { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 228.91857875883431======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
Stripped:  { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 194.6705983889528======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
Stripped:  { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 249.37135005152868======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
Stripped:  { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 274.49104043531287======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
Stripped:  { "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1
======SIMILARITY SCORE 293.3644394862208======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What are the recommended dosages for Vicodin and Percocet?",
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?",
======SIMILARITY SCORE 396.21584378663======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 301.3636270533775======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 320.19324569145726======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 335.92015431056416======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 301.6387928158851======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 356.3366402387036======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 381.4424096570898======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1
======SIMILARITY SCORE 366.36534727408514======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What are the recommended dosages for Vicodin and Percocet?",
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
Stripped:  "question": "What are the recommended dosages for Vicodin and Percocet?", "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 },
======SIMILARITY SCORE 359.89615358338455======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
Stripped:  "answers": [
======SIMILARITY SCORE 283.5049664037394======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 309.28376520793586======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 325.11918461285546======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 290.95447755326677======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 345.5746631199031======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 371.0534726076937======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1
======SIMILARITY SCORE 355.90765823323966======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 },
======SIMILARITY SCORE 361.78317079828287======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "answers": [ "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 269.6737089201878======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "20mg of Vicodin and 30mg of Percocet",
Stripped:  "20mg of Vicodin and 30mg of Percocet",
======SIMILARITY SCORE 296.6282543747333======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances",
======SIMILARITY SCORE 312.72673922321803======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 280.24271150317213======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 334.84630504464525======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 360.29651593773167======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1
======SIMILARITY SCORE 345.137384133863======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 },
======SIMILARITY SCORE 351.00431993047215======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 278.10879099070837======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "20mg of Vicodin and 30mg of Percocet",
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
Stripped:  "20mg of Vicodin and 30mg of Percocet", "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 299.5397008055236======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Varies depending on individual circumstances",
Stripped:  "Varies depending on individual circumstances",
======SIMILARITY SCORE 317.09903103684053======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Varies depending on individual circumstances",
                "No recommended dosages",
Stripped:  "Varies depending on individual circumstances", "No recommended dosages",
======SIMILARITY SCORE 286.3484134642674======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
Stripped:  "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 340.86315289051845======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
Stripped:  "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 366.0583647183057======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
Stripped:  "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1
======SIMILARITY SCORE 350.8284386091654======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
Stripped:  "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 },
======SIMILARITY SCORE 356.64970019986674======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 283.9767605190663======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
Stripped:  "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 373.32322031729586======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Varies depending on individual circumstances",
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
Stripped:  "Varies depending on individual circumstances", "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 325.7622666291397======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No recommended dosages",
Stripped:  "No recommended dosages",
======SIMILARITY SCORE 301.82011992005323======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 356.2360271739914======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 384.3797310535221======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1
======SIMILARITY SCORE 369.0323886639676======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 },
======SIMILARITY SCORE 374.7785304846274======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 303.1618030738655======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 392.28190700021844======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 354.5868445886657======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No recommended dosages",
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
Stripped:  "No recommended dosages", "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always",
======SIMILARITY SCORE 273.0900396859108======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "50mg of Vicodin and 60mg of Percocet"
Stripped:  "50mg of Vicodin and 60mg of Percocet"
======SIMILARITY SCORE 328.9106913625527======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "50mg of Vicodin and 60mg of Percocet"
              ],
Stripped:  "50mg of Vicodin and 60mg of Percocet" ],
======SIMILARITY SCORE 358.2289055973266======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
Stripped:  "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1
======SIMILARITY SCORE 342.92029809271185======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
Stripped:  "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 },
======SIMILARITY SCORE 348.69275461380727======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 283.003164854448======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
Stripped:  "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 372.0678594018252======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
Stripped:  "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 334.31435484667423======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
Stripped:  "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always",
======SIMILARITY SCORE 341.1148873002852======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "50mg of Vicodin and 60mg of Percocet"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
Stripped:  "50mg of Vicodin and 60mg of Percocet" ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never",
======SIMILARITY SCORE 219.5121951219512======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
Stripped:  ],
======SIMILARITY SCORE 262.280701754386======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
Stripped:  ], "correctAnswer": 1
======SIMILARITY SCORE 248.54700854700855======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
Stripped:  ], "correctAnswer": 1 },
======SIMILARITY SCORE 255.82020745293894======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
Stripped:  ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 200.66273932253313======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
Stripped:  ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 289.35172154986395======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
Stripped:  ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 251.21753246753246======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
Stripped:  ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always",
======SIMILARITY SCORE 257.63872303160576======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
Stripped:  ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never",
======SIMILARITY SCORE 221.66151391243642======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
Stripped:  ], "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision",
======SIMILARITY SCORE 387.66829865361075======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
Stripped:  "correctAnswer": 1
======SIMILARITY SCORE 373.95104895104896======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
Stripped:  "correctAnswer": 1 },
======SIMILARITY SCORE 381.24509033778475======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
Stripped:  "correctAnswer": 1 }, {
======SIMILARITY SCORE 326.2178836600609======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
Stripped:  "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 414.85341709499335======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
Stripped:  "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 376.66598107774576======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
Stripped:  "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always",
======SIMILARITY SCORE 383.0390259635543======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
Stripped:  "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never",
======SIMILARITY SCORE 347.02501008471154======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
Stripped:  "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision",
======SIMILARITY SCORE 354.6052631578947======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
Stripped:  "correctAnswer": 1 }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 230.76923076923077======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
Stripped:  },
======SIMILARITY SCORE 238.58123569794054======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
Stripped:  }, {
======SIMILARITY SCORE 194.8335110795118======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
Stripped:  }, { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 283.7789661319073======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
Stripped:  }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 245.90459045904592======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
Stripped:  }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always",
======SIMILARITY SCORE 256.1825362000878======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
Stripped:  }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never",
======SIMILARITY SCORE 220.51449039400848======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
Stripped:  }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision",
======SIMILARITY SCORE 228.9473684210526======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
Stripped:  }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 250.7621951219512======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
Stripped:  }, { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ],
======SIMILARITY SCORE 236.84210526315792======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
Stripped:  {
======SIMILARITY SCORE 195.35781033339362======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Can Vicodin and Percocet be taken together?",
Stripped:  { "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 284.2497868712702======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
Stripped:  { "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 246.32252169940614======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
Stripped:  { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always",
======SIMILARITY SCORE 256.6037735849057======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
Stripped:  { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never",
======SIMILARITY SCORE 220.89650626235994======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
Stripped:  { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision",
======SIMILARITY SCORE 229.28331466965284======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
Stripped:  { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 251.09114249037225======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
Stripped:  { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ],
======SIMILARITY SCORE 277.85087719298247======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
Stripped:  { "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3
======SIMILARITY SCORE 285.44334333390634======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Can Vicodin and Percocet be taken together?",
Stripped:  "question": "Can Vicodin and Percocet be taken together?",
======SIMILARITY SCORE 375.4813813637343======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [
======SIMILARITY SCORE 337.5173050299953======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always",
======SIMILARITY SCORE 347.80037572490403======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never",
======SIMILARITY SCORE 312.0654932130342======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision",
======SIMILARITY SCORE 320.42036910457955======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 342.22340617238484======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ],
======SIMILARITY SCORE 368.97345712263797======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3
======SIMILARITY SCORE 353.80946921930524======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Can Vicodin and Percocet be taken together?",
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
Stripped:  "question": "Can Vicodin and Percocet be taken together?", "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 },
======SIMILARITY SCORE 359.89615358338455======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
Stripped:  "answers": [
======SIMILARITY SCORE 332.26049313005836======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Yes, always",
Stripped:  "answers": [ "Yes, always",
======SIMILARITY SCORE 345.4942491803669======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Yes, always",
                "No, never",
Stripped:  "answers": [ "Yes, always", "No, never",
======SIMILARITY SCORE 313.6164736164736======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
Stripped:  "answers": [ "Yes, always", "No, never", "Only under medical supervision",
======SIMILARITY SCORE 326.99565656222======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
Stripped:  "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 348.6788617886179======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
Stripped:  "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ],
======SIMILARITY SCORE 375.4200315603824======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
Stripped:  "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3
======SIMILARITY SCORE 360.15366747074063======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
Stripped:  "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 },
======SIMILARITY SCORE 365.95116824318865======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
Stripped:  "answers": [ "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, {
======SIMILARITY SCORE 272.8600790513834======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
Stripped:  "Yes, always",
======SIMILARITY SCORE 288.73393491933285======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "No, never",
Stripped:  "Yes, always", "No, never",
======SIMILARITY SCORE 260.5744268029405======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "No, never",
                "Only under medical supervision",
Stripped:  "Yes, always", "No, never", "Only under medical supervision",
======SIMILARITY SCORE 274.50052807604294======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
Stripped:  "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 296.1658114417534======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
Stripped:  "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ],
======SIMILARITY SCORE 323.0053394355454======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
Stripped:  "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3
======SIMILARITY SCORE 307.72388648858146======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
Stripped:  "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 },
======SIMILARITY SCORE 313.5118554944253======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
Stripped:  "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, {
======SIMILARITY SCORE 187.35905778903623======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  "Yes, always", "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 304.35301008241646======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, never",
Stripped:  "No, never",
======SIMILARITY SCORE 285.3964850780137======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, never",
                "Only under medical supervision",
Stripped:  "No, never", "Only under medical supervision",
======SIMILARITY SCORE 300.7833998562114======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
Stripped:  "No, never", "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 322.3878908547898======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
Stripped:  "No, never", "Only under medical supervision", "Depends on the specific situation" ],
======SIMILARITY SCORE 349.1446904788398======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
Stripped:  "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3
======SIMILARITY SCORE 333.81343427214983======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
Stripped:  "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 },
======SIMILARITY SCORE 339.56937799043067======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
Stripped:  "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, {
======SIMILARITY SCORE 212.72814601344862======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 352.5282234105763======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, never",
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
Stripped:  "No, never", "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 291.1122661122661======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only under medical supervision",
Stripped:  "Only under medical supervision",
======SIMILARITY SCORE 308.7359424201529======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only under medical supervision",
                "Depends on the specific situation"
Stripped:  "Only under medical supervision", "Depends on the specific situation"
======SIMILARITY SCORE 330.3150534657932======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
Stripped:  "Only under medical supervision", "Depends on the specific situation" ],
======SIMILARITY SCORE 357.1905773573309======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
Stripped:  "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3
======SIMILARITY SCORE 341.83864915572235======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
Stripped:  "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 },
======SIMILARITY SCORE 347.58160730700774======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
Stripped:  "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, {
======SIMILARITY SCORE 222.6135142302807======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 362.3725881396673======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
Stripped:  "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 296.8995475113122======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only under medical supervision",
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
Stripped:  "Only under medical supervision", "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions",
======SIMILARITY SCORE 312.9480571188757======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Depends on the specific situation"
Stripped:  "Depends on the specific situation"
======SIMILARITY SCORE 335.91007151181395======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Depends on the specific situation"
              ],
Stripped:  "Depends on the specific situation" ],
======SIMILARITY SCORE 367.30913103654655======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
Stripped:  "Depends on the specific situation" ], "correctAnswer": 3
======SIMILARITY SCORE 351.90041694362196======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
Stripped:  "Depends on the specific situation" ], "correctAnswer": 3 },
======SIMILARITY SCORE 357.60821690149794======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
Stripped:  "Depends on the specific situation" ], "correctAnswer": 3 }, {
======SIMILARITY SCORE 237.37042062415196======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 377.04205901520396======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
Stripped:  "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 311.22724311854563======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
Stripped:  "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions",
======SIMILARITY SCORE 321.5435807973121======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Depends on the specific situation"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
Stripped:  "Depends on the specific situation" ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 219.5121951219512======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
Stripped:  ],
======SIMILARITY SCORE 262.280701754386======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 3
Stripped:  ], "correctAnswer": 3
======SIMILARITY SCORE 248.54700854700855======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 3
            },
Stripped:  ], "correctAnswer": 3 },
======SIMILARITY SCORE 255.82020745293894======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 3
            },
            {
Stripped:  ], "correctAnswer": 3 }, {
======SIMILARITY SCORE 148.4848484848485======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 288.1149571742054======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
Stripped:  ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 221.99614271938285======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
Stripped:  ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions",
======SIMILARITY SCORE 232.1803793150498======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
Stripped:  ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 246.63203753351206======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
Stripped:  ], "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 387.66829865361075======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 3
Stripped:  "correctAnswer": 3
======SIMILARITY SCORE 373.95104895104896======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 3
            },
Stripped:  "correctAnswer": 3 },
======SIMILARITY SCORE 381.24509033778475======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 3
            },
            {
Stripped:  "correctAnswer": 3 }, {
======SIMILARITY SCORE 273.8679902473006======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 413.47860312008015======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
Stripped:  "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 347.3022984028048======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
Stripped:  "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions",
======SIMILARITY SCORE 357.43875584916043======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
Stripped:  "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 371.8581081081081======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
Stripped:  "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 336.7142857142857======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 3
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
Stripped:  "correctAnswer": 3 }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 230.76923076923077======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
Stripped:  },
======SIMILARITY SCORE 238.58123569794054======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
Stripped:  }, {
======SIMILARITY SCORE 147.38292011019286======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 287.0588235294117======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
Stripped:  }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 220.8584493868219======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
Stripped:  }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions",
======SIMILARITY SCORE 232.35037134119705======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
Stripped:  }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 246.67022792022792======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
Stripped:  }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 211.43607049118862======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
Stripped:  }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 245.03302845528455======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
Stripped:  }, { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ],
======SIMILARITY SCORE 236.84210526315792======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
Stripped:  {
======SIMILARITY SCORE 147.78749841511348======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 287.44164332399623======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 221.1764705882353======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions",
======SIMILARITY SCORE 232.6278659611993======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 246.91091954022988======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 211.64021164021165======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 245.2339798988541======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ],
======SIMILARITY SCORE 272.1140350877193======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
Stripped:  { "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1
======SIMILARITY SCORE 218.57572806939902======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
======SIMILARITY SCORE 358.2147812971342======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [
======SIMILARITY SCORE 291.90511843918534======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions",
======SIMILARITY SCORE 303.3285555024686======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 317.5865199347859======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 282.29093601434033======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 315.88253542368994======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ],
======SIMILARITY SCORE 342.7600214296856======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1
======SIMILARITY SCORE 327.71596649402136======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?",
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
Stripped:  "question": "What potential risks or interactions may arise from taking 20mg of Vicodin and 30mg of Percocet simultaneously?", "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 },
======SIMILARITY SCORE 359.89615358338455======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
Stripped:  "answers": [
======SIMILARITY SCORE 312.9046320514961======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No risks or interactions",
Stripped:  "answers": [ "No risks or interactions",
======SIMILARITY SCORE 329.4139194139194======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
Stripped:  "answers": [ "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 346.8648075668624======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
Stripped:  "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 313.88410786001145======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
Stripped:  "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 347.289972899729======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
Stripped:  "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ],
======SIMILARITY SCORE 374.80046980920935======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
Stripped:  "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1
======SIMILARITY SCORE 359.58396834309247======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
Stripped:  "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 },
======SIMILARITY SCORE 365.4135338345865======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "answers": [ "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 318.9583423642117======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No risks or interactions",
Stripped:  "No risks or interactions",
======SIMILARITY SCORE 335.94399950332155======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No risks or interactions",
                "Increased risk of respiratory depression",
Stripped:  "No risks or interactions", "Increased risk of respiratory depression",
======SIMILARITY SCORE 353.45462399210135======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
Stripped:  "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 320.46004842615014======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
Stripped:  "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 353.84309363978684======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
Stripped:  "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ],
======SIMILARITY SCORE 381.41747747373955======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
Stripped:  "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1
======SIMILARITY SCORE 366.1806211192535======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
Stripped:  "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 },
======SIMILARITY SCORE 371.9970965630226======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 262.91603071175234======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No risks or interactions",
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
Stripped:  "No risks or interactions", "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
======SIMILARITY SCORE 349.65367965367966======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased risk of respiratory depression",
Stripped:  "Increased risk of respiratory depression",
======SIMILARITY SCORE 370.2106741573034======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief",
======SIMILARITY SCORE 337.44505494505495======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 370.7918159750318======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ],
======SIMILARITY SCORE 399.52707856598016======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1
======SIMILARITY SCORE 384.2456256190162======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 },
======SIMILARITY SCORE 390.03359462486003======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 282.52458586476683======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
======SIMILARITY SCORE 406.02588009267106======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased risk of respiratory depression",
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
Stripped:  "Increased risk of respiratory depression", "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 310.88025780189963======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced pain relief",
Stripped:  "Enhanced pain relief",
======SIMILARITY SCORE 284.05131453911946======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced pain relief",
                "Improved overall well-being"
Stripped:  "Enhanced pain relief", "Improved overall well-being"
======SIMILARITY SCORE 318.5867732384455======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
Stripped:  "Enhanced pain relief", "Improved overall well-being" ],
======SIMILARITY SCORE 348.4488346967124======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
Stripped:  "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1
======SIMILARITY SCORE 333.12613312613314======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
Stripped:  "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 },
======SIMILARITY SCORE 338.8887497181794======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 234.4589616273483======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
Stripped:  "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
======SIMILARITY SCORE 357.9922698152168======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
Stripped:  "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 305.2100708924104======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced pain relief",
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
Stripped:  "Enhanced pain relief", "Improved overall well-being" ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary",
======SIMILARITY SCORE 289.11007025761126======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved overall well-being"
Stripped:  "Improved overall well-being"
======SIMILARITY SCORE 323.85703061432764======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved overall well-being"
              ],
Stripped:  "Improved overall well-being" ],
======SIMILARITY SCORE 354.7417420296339======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved overall well-being"
              ],
              "correctAnswer": 1
Stripped:  "Improved overall well-being" ], "correctAnswer": 1
======SIMILARITY SCORE 339.4031105506515======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
Stripped:  "Improved overall well-being" ], "correctAnswer": 1 },
======SIMILARITY SCORE 345.1566237671335======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "Improved overall well-being" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 246.43678119554======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
Stripped:  "Improved overall well-being" ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
======SIMILARITY SCORE 369.844084293333======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
Stripped:  "Improved overall well-being" ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 316.77538143158574======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
Stripped:  "Improved overall well-being" ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary",
======SIMILARITY SCORE 330.3377105418553======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved overall well-being"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
Stripped:  "Improved overall well-being" ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always",
======SIMILARITY SCORE 219.5121951219512======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
Stripped:  ],
======SIMILARITY SCORE 262.280701754386======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
Stripped:  ], "correctAnswer": 1
======SIMILARITY SCORE 248.54700854700855======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
Stripped:  ], "correctAnswer": 1 },
======SIMILARITY SCORE 255.82020745293894======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
Stripped:  ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 166.98008165285168======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
Stripped:  ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
======SIMILARITY SCORE 290.2433262461611======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
Stripped:  ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 236.8246336996337======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
Stripped:  ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary",
======SIMILARITY SCORE 250.12626262626264======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
Stripped:  ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always",
======SIMILARITY SCORE 198.36963036963039======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
Stripped:  ], "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects",
======SIMILARITY SCORE 387.66829865361075======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
Stripped:  "correctAnswer": 1
======SIMILARITY SCORE 373.95104895104896======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
Stripped:  "correctAnswer": 1 },
======SIMILARITY SCORE 381.24509033778475======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
Stripped:  "correctAnswer": 1 }, {
======SIMILARITY SCORE 292.4383634597914======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
Stripped:  "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
======SIMILARITY SCORE 415.6743185078909======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
Stripped:  "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 362.1990740740741======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
Stripped:  "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary",
======SIMILARITY SCORE 375.46251993620416======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
Stripped:  "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always",
======SIMILARITY SCORE 323.6448334274421======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
Stripped:  "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects",
======SIMILARITY SCORE 340.2380952380952======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
Stripped:  "correctAnswer": 1 }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications"
======SIMILARITY SCORE 230.76923076923077======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
Stripped:  },
======SIMILARITY SCORE 238.58123569794054======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
Stripped:  }, {
======SIMILARITY SCORE 165.96630056620506======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
Stripped:  }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
======SIMILARITY SCORE 290.14425153321235======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
Stripped:  }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 236.59113545816734======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
Stripped:  }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary",
======SIMILARITY SCORE 250.51264524948738======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
Stripped:  }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always",
======SIMILARITY SCORE 199.1942051347992======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
Stripped:  }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects",
======SIMILARITY SCORE 215.66074950690333======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
Stripped:  }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications"
======SIMILARITY SCORE 248.25119805450254======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
Stripped:  }, { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ],
======SIMILARITY SCORE 236.84210526315792======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
Stripped:  {
======SIMILARITY SCORE 166.457951361262======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
Stripped:  { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
======SIMILARITY SCORE 290.6162464985994======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
Stripped:  { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 236.9959677419355======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
Stripped:  { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary",
======SIMILARITY SCORE 250.8814379536813======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
Stripped:  { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always",
======SIMILARITY SCORE 199.4978354978355======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
Stripped:  { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects",
======SIMILARITY SCORE 215.92039800995022======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
Stripped:  { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications"
======SIMILARITY SCORE 248.5062779621879======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
Stripped:  { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ],
======SIMILARITY SCORE 275.30591183841955======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
Stripped:  { "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1
======SIMILARITY SCORE 260.5435598784619======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
Stripped:  "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
======SIMILARITY SCORE 384.6879968203497======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
Stripped:  "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 331.0213414634146======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
Stripped:  "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary",
======SIMILARITY SCORE 344.88200975269945======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
Stripped:  "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always",
======SIMILARITY SCORE 293.45365205264534======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
Stripped:  "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects",
======SIMILARITY SCORE 309.84609609609606======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
Stripped:  "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications"
======SIMILARITY SCORE 342.42886178861784======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
Stripped:  "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ],
======SIMILARITY SCORE 369.22319001729676======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
Stripped:  "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1
======SIMILARITY SCORE 354.1281693167168======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?",
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
Stripped:  "question": "Should one consult a healthcare professional before combining Vicodin and Percocet?", "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 },
======SIMILARITY SCORE 359.89615358338455======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
Stripped:  "answers": [
======SIMILARITY SCORE 321.49234693877554======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No, it's unnecessary",
Stripped:  "answers": [ "No, it's unnecessary",
======SIMILARITY SCORE 340.58040724707394======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
Stripped:  "answers": [ "No, it's unnecessary", "Yes, always",
======SIMILARITY SCORE 298.2401183406209======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
Stripped:  "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects",
======SIMILARITY SCORE 314.3833943833944======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
Stripped:  "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications"
======SIMILARITY SCORE 346.81780090856967======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
Stripped:  "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ],
======SIMILARITY SCORE 374.4458803258145======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
Stripped:  "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1
======SIMILARITY SCORE 359.2119592119592======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
Stripped:  "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 },
======SIMILARITY SCORE 365.0303920721344======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "answers": [ "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 331.61889416553595======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, it's unnecessary",
Stripped:  "No, it's unnecessary",
======SIMILARITY SCORE 351.4338010982306======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, it's unnecessary",
                "Yes, always",
Stripped:  "No, it's unnecessary", "Yes, always",
======SIMILARITY SCORE 310.18014243820693======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
Stripped:  "No, it's unnecessary", "Yes, always", "Only if experiencing side effects",
======SIMILARITY SCORE 328.3367612779377======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
Stripped:  "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications"
======SIMILARITY SCORE 360.74596135571744======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
Stripped:  "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ],
======SIMILARITY SCORE 388.44980014570655======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
Stripped:  "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1
======SIMILARITY SCORE 373.1934731934732======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
Stripped:  "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 },
======SIMILARITY SCORE 378.99753048309924======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 263.4694401643554======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "No, it's unnecessary",
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
Stripped:  "No, it's unnecessary", "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
======SIMILARITY SCORE 272.8600790513834======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
Stripped:  "Yes, always",
======SIMILARITY SCORE 238.23535562666======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "Only if experiencing side effects",
Stripped:  "Yes, always", "Only if experiencing side effects",
======SIMILARITY SCORE 261.617008754506======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
Stripped:  "Yes, always", "Only if experiencing side effects", "Only if taking other medications"
======SIMILARITY SCORE 293.99045599151646======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
Stripped:  "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ],
======SIMILARITY SCORE 321.96900828605163======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
Stripped:  "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1
======SIMILARITY SCORE 306.67992407122847======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
Stripped:  "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 },
======SIMILARITY SCORE 312.4632232755803======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 198.17523056653494======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
Stripped:  "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
======SIMILARITY SCORE 328.117830983325======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Yes, always",
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
Stripped:  "Yes, always", "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 265.489832296555======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if experiencing side effects",
Stripped:  "Only if experiencing side effects",
======SIMILARITY SCORE 292.0642102995044======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if experiencing side effects",
                "Only if taking other medications"
Stripped:  "Only if experiencing side effects", "Only if taking other medications"
======SIMILARITY SCORE 324.3929582380085======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
Stripped:  "Only if experiencing side effects", "Only if taking other medications" ],
======SIMILARITY SCORE 352.4767801857585======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
Stripped:  "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1
======SIMILARITY SCORE 337.1488840798304======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
Stripped:  "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 },
======SIMILARITY SCORE 342.9074021953279======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 229.0056022408964======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
Stripped:  "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
======SIMILARITY SCORE 358.91917742706835======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
Stripped:  "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 357.1272953625895======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if experiencing side effects",
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
Stripped:  "Only if experiencing side effects", "Only if taking other medications" ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness",
======SIMILARITY SCORE 302.4033437826541======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if taking other medications"
Stripped:  "Only if taking other medications"
======SIMILARITY SCORE 334.7456103553664======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if taking other medications"
              ],
Stripped:  "Only if taking other medications" ],
======SIMILARITY SCORE 365.26564096687======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if taking other medications"
              ],
              "correctAnswer": 1
Stripped:  "Only if taking other medications" ], "correctAnswer": 1
======SIMILARITY SCORE 349.9136157959687======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
Stripped:  "Only if taking other medications" ], "correctAnswer": 1 },
======SIMILARITY SCORE 355.65817291643486======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
Stripped:  "Only if taking other medications" ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 248.28319162851534======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
Stripped:  "Only if taking other medications" ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
======SIMILARITY SCORE 378.1134571916864======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
Stripped:  "Only if taking other medications" ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 376.7244786353066======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
Stripped:  "Only if taking other medications" ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness",
======SIMILARITY SCORE 322.90249285264883======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Only if taking other medications"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
Stripped:  "Only if taking other medications" ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing",
======SIMILARITY SCORE 219.5121951219512======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
Stripped:  ],
======SIMILARITY SCORE 262.280701754386======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
Stripped:  ], "correctAnswer": 1
======SIMILARITY SCORE 248.54700854700855======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
Stripped:  ], "correctAnswer": 1 },
======SIMILARITY SCORE 255.82020745293894======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
Stripped:  ], "correctAnswer": 1 }, {
======SIMILARITY SCORE 159.5679012345679======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
Stripped:  ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
======SIMILARITY SCORE 289.2769607843137======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
Stripped:  ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 287.66001024065537======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
Stripped:  ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness",
======SIMILARITY SCORE 233.34925563251335======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
Stripped:  ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing",
======SIMILARITY SCORE 222.83320240900755======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
Stripped:  ], "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood",
======SIMILARITY SCORE 387.66829865361075======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
Stripped:  "correctAnswer": 1
======SIMILARITY SCORE 373.95104895104896======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
Stripped:  "correctAnswer": 1 },
======SIMILARITY SCORE 381.24509033778475======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
Stripped:  "correctAnswer": 1 }, {
======SIMILARITY SCORE 285.0======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
Stripped:  "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
======SIMILARITY SCORE 414.6845694799659======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
Stripped:  "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 413.0262249827467======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
Stripped:  "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness",
======SIMILARITY SCORE 358.6427566807314======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
Stripped:  "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing",
======SIMILARITY SCORE 348.1029380680617======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
Stripped:  "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood",
======SIMILARITY SCORE 386.74242424242425======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
Stripped:  "correctAnswer": 1 }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite"
======SIMILARITY SCORE 230.76923076923077======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
Stripped:  },
======SIMILARITY SCORE 238.58123569794054======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
Stripped:  }, {
======SIMILARITY SCORE 158.4841628959276======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
Stripped:  }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
======SIMILARITY SCORE 288.235294117647======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
Stripped:  }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 286.65307887097765======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
Stripped:  }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness",
======SIMILARITY SCORE 232.26137529935======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
Stripped:  }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing",
======SIMILARITY SCORE 221.73644975057448======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
Stripped:  }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood",
======SIMILARITY SCORE 262.16216216216213======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
Stripped:  }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite"
======SIMILARITY SCORE 248.08362369337976======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            },
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
Stripped:  }, { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ],
======SIMILARITY SCORE 236.84210526315792======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
Stripped:  {
======SIMILARITY SCORE 158.94495412844037======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
Stripped:  { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
======SIMILARITY SCORE 288.66819455054747======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
Stripped:  { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 287.03912010998624======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
Stripped:  { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness",
======SIMILARITY SCORE 232.56577526245303======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
Stripped:  { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing",
======SIMILARITY SCORE 222.01471420486698======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
Stripped:  { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood",
======SIMILARITY SCORE 262.4242424242424======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
Stripped:  { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite"
======SIMILARITY SCORE 248.34102395078003======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
Stripped:  { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ],
======SIMILARITY SCORE 274.59130781499204======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
Stripped:  { "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1
======SIMILARITY SCORE 225.92592592592592======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
Stripped:  "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
======SIMILARITY SCORE 355.62976282215936======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
Stripped:  "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [
======SIMILARITY SCORE 353.968253968254======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
Stripped:  "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness",
======SIMILARITY SCORE 299.43886206446564======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
Stripped:  "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing",
======SIMILARITY SCORE 288.86990202779674======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
Stripped:  "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood",
======SIMILARITY SCORE 329.2682926829268======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
Stripped:  "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite"
======SIMILARITY SCORE 315.1818829366541======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
Stripped:  "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ],
======SIMILARITY SCORE 341.4235588972431======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
Stripped:  "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1
======SIMILARITY SCORE 332.4860446570973======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?",
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
Stripped:  "question": "What symptoms may indicate an adverse reaction to the combination of Vicodin and Percocet?", "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1 }
======SIMILARITY SCORE 359.89615358338455======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
Stripped:  "answers": [
======SIMILARITY SCORE 375.2337464666232======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Increased alertness",
Stripped:  "answers": [ "Increased alertness",
======SIMILARITY SCORE 330.20217324014794======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
Stripped:  "answers": [ "Increased alertness", "Drowsiness and difficulty breathing",
======SIMILARITY SCORE 319.9037196952778======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
Stripped:  "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood",
======SIMILARITY SCORE 361.9047619047619======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
Stripped:  "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite"
======SIMILARITY SCORE 347.6391792489353======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
Stripped:  "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ],
======SIMILARITY SCORE 374.4586877028637======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
Stripped:  "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1
======SIMILARITY SCORE 365.4135338345865======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
Stripped:  "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1 }
======SIMILARITY SCORE 323.95478528017094======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "answers": [
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
          ]          
Stripped:  "answers": [ "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1 } ]
======SIMILARITY SCORE 387.63575605680865======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased alertness",
Stripped:  "Increased alertness",
======SIMILARITY SCORE 345.03810551794066======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased alertness",
                "Drowsiness and difficulty breathing",
Stripped:  "Increased alertness", "Drowsiness and difficulty breathing",
======SIMILARITY SCORE 334.7813979392927======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
Stripped:  "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood",
======SIMILARITY SCORE 377.9372674109516======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
Stripped:  "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite"
======SIMILARITY SCORE 363.6421741575906======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
Stripped:  "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ],
======SIMILARITY SCORE 390.4913799650642======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
Stripped:  "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1
======SIMILARITY SCORE 381.42961122405444======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
Stripped:  "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1 }
======SIMILARITY SCORE 339.9547743858567======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
          ]          
Stripped:  "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1 } ]
======SIMILARITY SCORE 332.92073454207343======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Increased alertness",
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
          ]          
    });
Stripped:  "Increased alertness", "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1 } ] });
======SIMILARITY SCORE 315.09156886779857======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Drowsiness and difficulty breathing",
Stripped:  "Drowsiness and difficulty breathing",
======SIMILARITY SCORE 305.2027659510221======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Drowsiness and difficulty breathing",
                "Improved mood",
Stripped:  "Drowsiness and difficulty breathing", "Improved mood",
======SIMILARITY SCORE 350.2304147465437======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
Stripped:  "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite"
======SIMILARITY SCORE 335.91431152406756======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
Stripped:  "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ],
======SIMILARITY SCORE 363.0590900327742======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
Stripped:  "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1
======SIMILARITY SCORE 353.98496240601503======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
Stripped:  "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1 }
======SIMILARITY SCORE 312.49853509902727======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
          ]          
Stripped:  "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1 } ]
======SIMILARITY SCORE 305.6216931216931======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
          ]          
    });
Stripped:  "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1 } ] });
======SIMILARITY SCORE 118.1216931216931======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Drowsiness and difficulty breathing",
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
          ]          
    });
Stripped:  "Drowsiness and difficulty breathing", "Improved mood", "Enhanced appetite" ], "correctAnswer": 1 } ] });
======SIMILARITY SCORE 269.65568448680756======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved mood",
Stripped:  "Improved mood",
======SIMILARITY SCORE 320.32312925170066======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved mood",
                "Enhanced appetite"
Stripped:  "Improved mood", "Enhanced appetite"
======SIMILARITY SCORE 306.0121951219512======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved mood",
                "Enhanced appetite"
              ],
Stripped:  "Improved mood", "Enhanced appetite" ],
======SIMILARITY SCORE 336.51640195162463======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
Stripped:  "Improved mood", "Enhanced appetite" ], "correctAnswer": 1
======SIMILARITY SCORE 327.4122807017544======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
Stripped:  "Improved mood", "Enhanced appetite" ], "correctAnswer": 1 }
======SIMILARITY SCORE 285.8978386529278======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
          ]          
Stripped:  "Improved mood", "Enhanced appetite" ], "correctAnswer": 1 } ]
======SIMILARITY SCORE 279.3785310734463======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
          ]          
    });
Stripped:  "Improved mood", "Enhanced appetite" ], "correctAnswer": 1 } ] });
======SIMILARITY SCORE 270.14525993883797======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Improved mood",
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
Stripped:  "Improved mood", "Enhanced appetite" ], "correctAnswer": 1 } ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
======SIMILARITY SCORE 312.156862745098======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced appetite"
Stripped:  "Enhanced appetite"
======SIMILARITY SCORE 297.88459671416706======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced appetite"
              ],
Stripped:  "Enhanced appetite" ],
======SIMILARITY SCORE 330.7533539731682======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced appetite"
              ],
              "correctAnswer": 1
Stripped:  "Enhanced appetite" ], "correctAnswer": 1
======SIMILARITY SCORE 321.6396606489486======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
Stripped:  "Enhanced appetite" ], "correctAnswer": 1 }
======SIMILARITY SCORE 280.1167289658338======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
          ]          
Stripped:  "Enhanced appetite" ], "correctAnswer": 1 } ]
======SIMILARITY SCORE 273.82352941176475======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
          ]          
    });
Stripped:  "Enhanced appetite" ], "correctAnswer": 1 } ] });
======SIMILARITY SCORE 268.82010332017387======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
Stripped:  "Enhanced appetite" ], "correctAnswer": 1 } ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
======SIMILARITY SCORE 325.9659760062661======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                "Enhanced appetite"
              ],
              "correctAnswer": 1
            }
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
Stripped:  "Enhanced appetite" ], "correctAnswer": 1 } ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null);
======SIMILARITY SCORE 219.5121951219512======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
Stripped:  ],
======SIMILARITY SCORE 262.280701754386======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
Stripped:  ], "correctAnswer": 1
======SIMILARITY SCORE 254.75255302435195======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            }
Stripped:  ], "correctAnswer": 1 }
======SIMILARITY SCORE 214.76982097186698======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            }
          ]          
Stripped:  ], "correctAnswer": 1 } ]
======SIMILARITY SCORE 210.35714285714286======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            }
          ]          
    });
Stripped:  ], "correctAnswer": 1 } ] });
======SIMILARITY SCORE 211.41599900369465======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            }
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
Stripped:  ], "correctAnswer": 1 } ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
======SIMILARITY SCORE 268.2150581934288======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              ],
              "correctAnswer": 1
            }
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
Stripped:  ], "correctAnswer": 1 } ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null);
======SIMILARITY SCORE 387.66829865361075======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
Stripped:  "correctAnswer": 1
======SIMILARITY SCORE 380.1627159501808======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            }
Stripped:  "correctAnswer": 1 }
======SIMILARITY SCORE 340.2010460934946======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            }
          ]          
Stripped:  "correctAnswer": 1 } ]
======SIMILARITY SCORE 335.85766423357666======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            }
          ]          
    });
Stripped:  "correctAnswer": 1 } ] });
======SIMILARITY SCORE 148.35766423357666======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            }
          ]          
    });
Stripped:  "correctAnswer": 1 } ] });
======SIMILARITY SCORE 336.92660550458714======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            }
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
Stripped:  "correctAnswer": 1 } ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
======SIMILARITY SCORE 393.6181571956872======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            }
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
Stripped:  "correctAnswer": 1 } ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null);
======SIMILARITY SCORE 160.74144486692015======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            }
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
Stripped:  "correctAnswer": 1 } ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null);
======SIMILARITY SCORE 348.8602941176471======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              "correctAnswer": 1
            }
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
Stripped:  "correctAnswer": 1 } ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0);
======SIMILARITY SCORE 236.84210526315792======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            }
Stripped:  }
======SIMILARITY SCORE 197.40655987795571======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            }
          ]          
Stripped:  } ]
======SIMILARITY SCORE 194.27966101694915======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            }
          ]          
    });
Stripped:  } ] });
======SIMILARITY SCORE 210.49283112811767======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            }
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
Stripped:  } ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
======SIMILARITY SCORE 268.12261396811135======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            }
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
Stripped:  } ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null);
======SIMILARITY SCORE 224.78014461598593======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            }
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
Stripped:  } ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0);
======SIMILARITY SCORE 221.64634146341461======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            }
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
Stripped:  } ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
======SIMILARITY SCORE 195.65217391304344======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          ]          
Stripped:  ]
======SIMILARITY SCORE 192.67241379310346======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          ]          
    });
Stripped:  ] });
======SIMILARITY SCORE 210.8601499557584======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
Stripped:  ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
======SIMILARITY SCORE 268.41390241141175======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
Stripped:  ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null);
======SIMILARITY SCORE 225.02459177650994======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
Stripped:  ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0);
======SIMILARITY SCORE 221.8324250681199======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          ]          
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
Stripped:  ] }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
======SIMILARITY SCORE 277.965293668955======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
Stripped:  });
======SIMILARITY SCORE 298.191525267712======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
Stripped:  }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
======SIMILARITY SCORE 355.66656740123085======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
Stripped:  }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null);
======SIMILARITY SCORE 122.78985507246377======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
Stripped:  }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null);
======SIMILARITY SCORE 312.2288528938145======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
Stripped:  }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0);
======SIMILARITY SCORE 308.9770696843359======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
Stripped:  }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
======SIMILARITY SCORE 121.47706968433592======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
Stripped:  }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
======SIMILARITY SCORE 327.93354341790644======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    });
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
Stripped:  }); let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false);
======SIMILARITY SCORE 212.00826168403862======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
======SIMILARITY SCORE 269.3173902948688======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null);
======SIMILARITY SCORE 225.77795623368803======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0);
======SIMILARITY SCORE 222.40304709141276======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
======SIMILARITY SCORE 241.27750939345137======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false);
======SIMILARITY SCORE 235.0964626094998======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 322.00826168403864======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
======SIMILARITY SCORE 379.3173902948688======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null);
======SIMILARITY SCORE 146.44067796610167======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null);
======SIMILARITY SCORE 335.77795623368803======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0);
======SIMILARITY SCORE 332.40304709141276======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
======SIMILARITY SCORE 144.90304709141273======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
======SIMILARITY SCORE 351.2775093934514======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false);
======SIMILARITY SCORE 345.0964626094998======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 140.27718550106607======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1));
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [answers, setAnswers] = useState(Array(quizData.questions.length).fill(-1)); let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 469.5500994255413======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [score, setScore] = useState<any>(null);
Stripped:  let [score, setScore] = useState<any>(null);
======SIMILARITY SCORE 236.6733870967742======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [score, setScore] = useState<any>(null);
Stripped:  let [score, setScore] = useState<any>(null);
======SIMILARITY SCORE 434.75652053274143======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
Stripped:  let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0);
======SIMILARITY SCORE 432.7678571428571======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
Stripped:  let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
======SIMILARITY SCORE 245.26785714285714======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
Stripped:  let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
======SIMILARITY SCORE 450.83938104771437======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
Stripped:  let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false);
======SIMILARITY SCORE 443.5112874177121======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 238.69201030927834======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 456.85616585931234======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [score, setScore] = useState<any>(null);
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
Stripped:  let [score, setScore] = useState<any>(null); let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0);
======SIMILARITY SCORE 227.7562522014794======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0);
======SIMILARITY SCORE 230.0531914893617======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
======SIMILARITY SCORE 248.7654320987654======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false);
======SIMILARITY SCORE 240.97088060697598======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 253.94248608534323======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0);
======SIMILARITY SCORE 299.78954184879393======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false);
======SIMILARITY SCORE 372.4930943067426======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0);
======SIMILARITY SCORE 374.7900335946249======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
======SIMILARITY SCORE 187.29003359462487======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
======SIMILARITY SCORE 393.5022742040286======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false);
======SIMILARITY SCORE 385.70772271223916======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 180.88844560380545======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 398.6793281906064======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0);
======SIMILARITY SCORE 444.5263839540571======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false);
======SIMILARITY SCORE 342.24156007548754======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestion, setCurrentQuestion] = useState(0);
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [currentQuestion, setCurrentQuestion] = useState(0); let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 353.2626243058246======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
Stripped:  let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
======SIMILARITY SCORE 165.76262430582463======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
Stripped:  let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
======SIMILARITY SCORE 376.14016464591174======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
Stripped:  let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false);
======SIMILARITY SCORE 369.0182964798669======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 164.19901937143317======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 383.6339128361774======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
Stripped:  let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0);
======SIMILARITY SCORE 430.0212513908483======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
Stripped:  let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false);
======SIMILARITY SCORE 326.76794660032493======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 158.34689396874597======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1);
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [lastAnsweredQuestion, setLastAnsweredQuestion] = useState(-1); let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 246.68635916079674======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
Stripped:  let [quizStarted, setQuizStarted] = useState(false);
======SIMILARITY SCORE 248.85597435614014======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 264.9739773335279======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
Stripped:  let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0);
======SIMILARITY SCORE 310.1862789641072======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
Stripped:  let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false);
======SIMILARITY SCORE 205.02582716738797======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 247.76729559748426======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 399.4641369385745======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
Stripped:  let [quizStarted, setQuizStarted] = useState(false);
======SIMILARITY SCORE 401.63375213391794======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 196.8144750254842======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 417.75175511130567======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
Stripped:  let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0);
======SIMILARITY SCORE 462.964056741885======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
Stripped:  let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false);
======SIMILARITY SCORE 357.8036049451657======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 189.38255231358679======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 400.54507337526206======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 325.1427745246873======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizStarted, setQuizStarted] = useState(false);
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [quizStarted, setQuizStarted] = useState(false); let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 379.95441224356887======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 175.13513513513513======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizFinished, setQuizFinished] = useState(false);
Stripped:  let [quizFinished, setQuizFinished] = useState(false);
======SIMILARITY SCORE 403.5779073162251======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
Stripped:  let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0);
======SIMILARITY SCORE 447.87695570838======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
Stripped:  let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false);
======SIMILARITY SCORE 341.8277927049857======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 173.40674007340675======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 384.04798329326627======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 308.64568444269156======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 357.7080132845891======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [quizFinished, setQuizFinished] = useState(false);
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
Stripped:  let [quizFinished, setQuizFinished] = useState(false); let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format
======SIMILARITY SCORE 255.99934656538431======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
Stripped:  let [msRemaining, setMsRemaining] = useState(0);
======SIMILARITY SCORE 308.1996932087575======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
Stripped:  let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false);
======SIMILARITY SCORE 207.08276266875367======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 248.77637130801685======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 173.37407245744214======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 222.02511461032486======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
Stripped:  let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format
======SIMILARITY SCORE 216.46917051616794======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
Stripped:  let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => {
======SIMILARITY SCORE 373.64640538891376======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
Stripped:  let [msRemaining, setMsRemaining] = useState(0);
======SIMILARITY SCORE 425.84675203228693======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
Stripped:  let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false);
======SIMILARITY SCORE 324.7298214922831======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 156.30876886070416======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 366.4234301315463======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 291.0211312809716======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 339.6721734338543======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
Stripped:  let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format
======SIMILARITY SCORE 334.1162293396974======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
Stripped:  let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => {
======SIMILARITY SCORE 394.97625137011323======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [msRemaining, setMsRemaining] = useState(0);
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
Stripped:  let [msRemaining, setMsRemaining] = useState(0); let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000);
======SIMILARITY SCORE 464.1900740305209======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [paused, setPaused] = useState(false);
Stripped:  let [paused, setPaused] = useState(false);
======SIMILARITY SCORE 370.6204661213151======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 202.1994134897361======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 412.0768394345778======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 336.674540584003======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 385.96233001127325======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
Stripped:  let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format
======SIMILARITY SCORE 382.4326533038143======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
Stripped:  let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => {
======SIMILARITY SCORE 442.70756544169444======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
Stripped:  let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000);
======SIMILARITY SCORE 430.9780760275227======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [paused, setPaused] = useState(false);
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
Stripped:  let [paused, setPaused] = useState(false); let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60);
======SIMILARITY SCORE 335.87605197463506======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 167.45499934305613======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
Stripped:  let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
======SIMILARITY SCORE 381.4188815060908======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 306.0165826555161======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 356.14482632333346======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
Stripped:  let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format
======SIMILARITY SCORE 352.3849043148972======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
Stripped:  let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => {
======SIMILARITY SCORE 412.08866638716944======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
Stripped:  let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000);
======SIMILARITY SCORE 399.8876530726885======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
Stripped:  let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60);
======SIMILARITY SCORE 411.5804461319412======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
Stripped:  let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60;
======SIMILARITY SCORE 245.1804670912951======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 169.7781682407204======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 228.15784621058452======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
Stripped:  let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format
======SIMILARITY SCORE 224.7939560439561======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
Stripped:  let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => {
======SIMILARITY SCORE 283.92470431450937======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
Stripped:  let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000);
======SIMILARITY SCORE 271.3270579549649======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
Stripped:  let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60);
======SIMILARITY SCORE 282.61538461538464======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
Stripped:  let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60;
======SIMILARITY SCORE 194.75383373688462======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
Stripped:  let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
======SIMILARITY SCORE 366.39258830341635======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 290.9902894528416======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
Stripped:  let [timerId, setTimerId] = useState<any>(-1);
======SIMILARITY SCORE 349.3699674227057======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
Stripped:  let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format
======SIMILARITY SCORE 346.0060772560773======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
Stripped:  let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => {
======SIMILARITY SCORE 405.1368255266306======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
Stripped:  let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000);
======SIMILARITY SCORE 392.53917916708616======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
Stripped:  let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60);
======SIMILARITY SCORE 403.82750582750583======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
Stripped:  let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60;
======SIMILARITY SCORE 315.96595494900583======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
Stripped:  let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
======SIMILARITY SCORE 310.3870591773818======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    let [timerId, setTimerId] = useState<any>(-1);
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
Stripped:  let [timerId, setTimerId] = useState<any>(-1); // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); };
======SIMILARITY SCORE 137.9310344827586======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===

Stripped:  
======SIMILARITY SCORE 211.08374384236453======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
Stripped:  // Convert ms to MM:SS format
======SIMILARITY SCORE 213.99391568883095======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
Stripped:  // Convert ms to MM:SS format const formatTime = (ms: number) => {
======SIMILARITY SCORE 277.21793308953======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
Stripped:  // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000);
======SIMILARITY SCORE 268.39457567804027======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
Stripped:  // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60);
======SIMILARITY SCORE 281.6546762589928======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
Stripped:  // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60;
======SIMILARITY SCORE 197.81420765027323======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
Stripped:  // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
======SIMILARITY SCORE 192.18463152373462======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
Stripped:  // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); };
======SIMILARITY SCORE 313.12456016889513======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
Stripped:  // Convert ms to MM:SS format
======SIMILARITY SCORE 316.03473201536156======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
Stripped:  // Convert ms to MM:SS format const formatTime = (ms: number) => {
======SIMILARITY SCORE 379.2587494160606======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
Stripped:  // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000);
======SIMILARITY SCORE 370.4353920045709======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
Stripped:  // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60);
======SIMILARITY SCORE 383.6954925855234======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
Stripped:  // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60;
======SIMILARITY SCORE 299.85502397680386======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
Stripped:  // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
======SIMILARITY SCORE 294.22544785026525======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
Stripped:  // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); };
======SIMILARITY SCORE 132.93512526962004======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
Stripped:  // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); };
======SIMILARITY SCORE 327.6671504462924======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // Convert ms to MM:SS format
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
Stripped:  // Convert ms to MM:SS format const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => {
======SIMILARITY SCORE 372.54055468341187======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const formatTime = (ms: number) => {
Stripped:  const formatTime = (ms: number) => {
======SIMILARITY SCORE 437.5258799171842======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
Stripped:  const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000);
======SIMILARITY SCORE 429.8611111111111======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
Stripped:  const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60);
======SIMILARITY SCORE 443.778801843318======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
Stripped:  const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60;
======SIMILARITY SCORE 360.1190476190476======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
Stripped:  const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
======SIMILARITY SCORE 354.4529858760518======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
Stripped:  const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); };
======SIMILARITY SCORE 193.16266329540665======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
Stripped:  const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); };
======SIMILARITY SCORE 387.739008646937======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
Stripped:  const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => {
======SIMILARITY SCORE 382.14334883812404======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const formatTime = (ms: number) => {
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
Stripped:  const formatTime = (ms: number) => { let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL
======SIMILARITY SCORE 420.8666075125702======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let seconds = Math.floor(ms / 1000);
Stripped:  let seconds = Math.floor(ms / 1000);
======SIMILARITY SCORE 417.12715389185985======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
Stripped:  let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60);
======SIMILARITY SCORE 433.175355450237======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
Stripped:  let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60;
======SIMILARITY SCORE 350.1114827201784======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
Stripped:  let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
======SIMILARITY SCORE 344.40290536210216======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
Stripped:  let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); };
======SIMILARITY SCORE 183.11258278145698======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
Stripped:  let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); };
======SIMILARITY SCORE 377.5271739130435======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
Stripped:  let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => {
======SIMILARITY SCORE 372.80575266573067======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
Stripped:  let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL
======SIMILARITY SCORE 375.8807588075881======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let seconds = Math.floor(ms / 1000);
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
Stripped:  let seconds = Math.floor(ms / 1000); let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL }, []);
======SIMILARITY SCORE 421.5079365079365======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let minutes = Math.floor(seconds / 60);
Stripped:  let minutes = Math.floor(seconds / 60);
======SIMILARITY SCORE 438.6152162014231======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
Stripped:  let minutes = Math.floor(seconds / 60); seconds = seconds % 60;
======SIMILARITY SCORE 359.74797043499336======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
Stripped:  let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
======SIMILARITY SCORE 353.9827454617473======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
Stripped:  let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); };
======SIMILARITY SCORE 192.69242288110212======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
Stripped:  let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); };
======SIMILARITY SCORE 386.89116656546366======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
Stripped:  let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => {
======SIMILARITY SCORE 383.8443139813003======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
Stripped:  let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL
======SIMILARITY SCORE 386.9095429336393======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
Stripped:  let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL }, []);
======SIMILARITY SCORE 192.46509848919484======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let minutes = Math.floor(seconds / 60);
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
Stripped:  let minutes = Math.floor(seconds / 60); seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL }, []);
======SIMILARITY SCORE 442.60082565893936======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        seconds = seconds % 60;
Stripped:  seconds = seconds % 60;
======SIMILARITY SCORE 372.91546866014954======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
Stripped:  seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
======SIMILARITY SCORE 367.05864409364756======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
Stripped:  seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); };
======SIMILARITY SCORE 205.76832151300238======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
Stripped:  seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); };
======SIMILARITY SCORE 399.60979583756847======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
Stripped:  seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => {
======SIMILARITY SCORE 397.9090808330015======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
Stripped:  seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL
======SIMILARITY SCORE 400.958580264905======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
Stripped:  seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL }, []);
======SIMILARITY SCORE 206.51413582046052======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
Stripped:  seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL }, []);
======SIMILARITY SCORE 366.433696190005======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        seconds = seconds % 60;
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
Stripped:  seconds = seconds % 60; return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => {
======SIMILARITY SCORE 298.0889980889981======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
Stripped:  return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
======SIMILARITY SCORE 292.23021769964475======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
Stripped:  return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); };
======SIMILARITY SCORE 130.93989511899957======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
Stripped:  return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); };
======SIMILARITY SCORE 324.8882593135124======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
Stripped:  return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => {
======SIMILARITY SCORE 325.4953056322919======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
Stripped:  return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL
======SIMILARITY SCORE 328.61817040921517======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
Stripped:  return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL }, []);
======SIMILARITY SCORE 134.1737259647707======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
Stripped:  return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL }, []);
======SIMILARITY SCORE 294.099099099099======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
Stripped:  return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => {
======SIMILARITY SCORE 319.3248203436533======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
Stripped:  return minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0'); }; useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message);
======SIMILARITY SCORE 208.51477953961543======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    };
Stripped:  };
======SIMILARITY SCORE 257.9006124973599======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    };
    useEffect(() => {
Stripped:  }; useEffect(() => {
======SIMILARITY SCORE 270.9562976049118======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
Stripped:  }; useEffect(() => { //TODO: load the questions using GraphQL
======SIMILARITY SCORE 274.34343434343435======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
Stripped:  }; useEffect(() => { //TODO: load the questions using GraphQL }, []);
======SIMILARITY SCORE 238.98902821316614======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
Stripped:  }; useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => {
======SIMILARITY SCORE 270.2034080159221======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
Stripped:  }; useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message);
======SIMILARITY SCORE 356.94961899445696======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    };
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
Stripped:  }; useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = [];
======SIMILARITY SCORE 211.27717391304344======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
Stripped:  useEffect(() => {
======SIMILARITY SCORE 224.91691659236443======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
        //TODO: load the questions using GraphQL
Stripped:  useEffect(() => { //TODO: load the questions using GraphQL
======SIMILARITY SCORE 228.3427495291902======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
Stripped:  useEffect(() => { //TODO: load the questions using GraphQL }, []);
======SIMILARITY SCORE 193.0676855895196======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
Stripped:  useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => {
======SIMILARITY SCORE 225.12521628267007======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
Stripped:  useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message);
======SIMILARITY SCORE 311.84998196898664======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
Stripped:  useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = [];
======SIMILARITY SCORE 230.51643192488265======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
Stripped:  useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){
======SIMILARITY SCORE 346.4123090481786======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
Stripped:  useEffect(() => {
======SIMILARITY SCORE 360.0520517274996======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
        //TODO: load the questions using GraphQL
Stripped:  useEffect(() => { //TODO: load the questions using GraphQL
======SIMILARITY SCORE 363.4778846643253======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
Stripped:  useEffect(() => { //TODO: load the questions using GraphQL }, []);
======SIMILARITY SCORE 169.0334402198809======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
Stripped:  useEffect(() => { //TODO: load the questions using GraphQL }, []);
======SIMILARITY SCORE 328.20282072465477======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
Stripped:  useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => {
======SIMILARITY SCORE 360.26035141780517======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
Stripped:  useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message);
======SIMILARITY SCORE 446.98511710412174======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
Stripped:  useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = [];
======SIMILARITY SCORE 365.6515670600178======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
Stripped:  useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){
======SIMILARITY SCORE 334.21474857277894======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    useEffect(() => {
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
Stripped:  useEffect(() => { //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
======SIMILARITY SCORE 295.0713848317155======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        //TODO: load the questions using GraphQL
Stripped:  //TODO: load the questions using GraphQL
======SIMILARITY SCORE 298.98453878406707======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        //TODO: load the questions using GraphQL
    }, []);
Stripped:  //TODO: load the questions using GraphQL }, []);
======SIMILARITY SCORE 104.54009433962264======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        //TODO: load the questions using GraphQL
    }, []);
Stripped:  //TODO: load the questions using GraphQL }, []);
======SIMILARITY SCORE 270.95675355450237======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
Stripped:  //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => {
======SIMILARITY SCORE 303.38303310613435======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
Stripped:  //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message);
======SIMILARITY SCORE 390.0998060526922======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
Stripped:  //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = [];
======SIMILARITY SCORE 308.6414319248827======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
Stripped:  //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){
======SIMILARITY SCORE 277.01795340777824======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
Stripped:  //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
======SIMILARITY SCORE 362.9641840910544======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        //TODO: load the questions using GraphQL
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
Stripped:  //TODO: load the questions using GraphQL }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else {
======SIMILARITY SCORE 273.60326428123034======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }, []);
Stripped:  }, []);
======SIMILARITY SCORE 268.33877995642695======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
Stripped:  }, []); const finishedLoadingQuiz = (message: Message) => {
======SIMILARITY SCORE 301.39041417002227======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
Stripped:  }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message);
======SIMILARITY SCORE 387.95795434814545======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
Stripped:  }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = [];
======SIMILARITY SCORE 305.9142123768147======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
Stripped:  }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){
======SIMILARITY SCORE 274.08482502822125======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
Stripped:  }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
======SIMILARITY SCORE 359.92877492877494======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
Stripped:  }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else {
======SIMILARITY SCORE 361.3676849857754======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }, []);
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
Stripped:  }, []); const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content);
======SIMILARITY SCORE 194.59876543209873======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
Stripped:  const finishedLoadingQuiz = (message: Message) => {
======SIMILARITY SCORE 227.78810966464695======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message);
======SIMILARITY SCORE 314.3150429264651======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = [];
======SIMILARITY SCORE 232.12733650976492======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){
======SIMILARITY SCORE 200.71511084218054======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
======SIMILARITY SCORE 286.5238927738928======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else {
======SIMILARITY SCORE 287.9120879120879======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content);
======SIMILARITY SCORE 218.1122448979592======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); }
======SIMILARITY SCORE 293.19031472787333======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
Stripped:  const finishedLoadingQuiz = (message: Message) => {
======SIMILARITY SCORE 326.3796589604216======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message);
======SIMILARITY SCORE 412.90659222223974======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = [];
======SIMILARITY SCORE 330.71888580553957======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){
======SIMILARITY SCORE 299.3066601379552======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
======SIMILARITY SCORE 385.11544206966744======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else {
======SIMILARITY SCORE 386.50363720786254======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content);
======SIMILARITY SCORE 316.7037941937338======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); }
======SIMILARITY SCORE 284.998475702701======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const finishedLoadingQuiz = (message: Message) => {
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
Stripped:  const finishedLoadingQuiz = (message: Message) => { console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0]
======SIMILARITY SCORE 357.4385569847715======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Finished loading quiz: ", message);
Stripped:  console.log("Finished loading quiz: ", message);
======SIMILARITY SCORE 443.80353688864324======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Finished loading quiz: ", message);
      let parsed = [];
Stripped:  console.log("Finished loading quiz: ", message); let parsed = [];
======SIMILARITY SCORE 361.69922762380736======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
Stripped:  console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){
======SIMILARITY SCORE 331.372440047795======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
Stripped:  console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
======SIMILARITY SCORE 416.98168498168496======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
Stripped:  console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else {
======SIMILARITY SCORE 418.2586644125105======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
Stripped:  console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content);
======SIMILARITY SCORE 348.42436974789916======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
Stripped:  console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); }
======SIMILARITY SCORE 316.376306620209======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
Stripped:  console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0]
======SIMILARITY SCORE 423.47570785070786======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Finished loading quiz: ", message);
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
Stripped:  console.log("Finished loading quiz: ", message); let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed});
======SIMILARITY SCORE 450.2385130190193======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      let parsed = [];
Stripped:  let parsed = [];
======SIMILARITY SCORE 384.83974019555933======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      let parsed = [];
      if(message.content.includes("```json")){
Stripped:  let parsed = []; if(message.content.includes("```json")){
======SIMILARITY SCORE 359.9374625554999======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
Stripped:  let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
======SIMILARITY SCORE 445.38069046351706======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
Stripped:  let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else {
======SIMILARITY SCORE 446.87150401956444======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
Stripped:  let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content);
======SIMILARITY SCORE 377.00985711701935======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
Stripped:  let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); }
======SIMILARITY SCORE 347.81163434903044======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
Stripped:  let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0]
======SIMILARITY SCORE 454.9121419053964======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
Stripped:  let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed});
======SIMILARITY SCORE 392.1782996648247======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      let parsed = [];
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
Stripped:  let parsed = []; if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed});
======SIMILARITY SCORE 366.18544851677893======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(message.content.includes("```json")){
Stripped:  if(message.content.includes("```json")){
======SIMILARITY SCORE 346.08372218840873======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
Stripped:  if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
======SIMILARITY SCORE 431.48607664736693======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
Stripped:  if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else {
======SIMILARITY SCORE 433.1865004066142======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
Stripped:  if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content);
======SIMILARITY SCORE 363.31822462914994======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
Stripped:  if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); }
======SIMILARITY SCORE 336.5566391597899======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
Stripped:  if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0]
======SIMILARITY SCORE 443.5905231268134======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
Stripped:  if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed});
======SIMILARITY SCORE 380.6070175470236======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
Stripped:  if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed});
======SIMILARITY SCORE 343.01869876281114======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(message.content.includes("```json")){
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
Stripped:  if(message.content.includes("```json")){ parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration
======SIMILARITY SCORE 321.78353052611993======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
Stripped:  parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
======SIMILARITY SCORE 407.0646017977891======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
Stripped:  parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else {
======SIMILARITY SCORE 413.75463024947555======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
Stripped:  parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content);
======SIMILARITY SCORE 343.8293659572585======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
Stripped:  parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); }
======SIMILARITY SCORE 317.37470654281924======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
Stripped:  parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0]
======SIMILARITY SCORE 424.3511770014378======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
Stripped:  parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed});
======SIMILARITY SCORE 360.8383096223116======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
Stripped:  parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed});
======SIMILARITY SCORE 322.73731423215963======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
Stripped:  parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration
======SIMILARITY SCORE 361.4324286415597======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]);
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
Stripped:  parsed = JSON.parse(message.content.split("```json")[1].split("```")[0]); } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1))
======SIMILARITY SCORE 364.8136177547942======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      } else {
Stripped:  } else {
======SIMILARITY SCORE 386.44222020018196======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      } else {
        parsed = JSON.parse(message.content);
Stripped:  } else { parsed = JSON.parse(message.content);
======SIMILARITY SCORE 316.4308176100629======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      } else {
        parsed = JSON.parse(message.content);
      }
Stripped:  } else { parsed = JSON.parse(message.content); }
======SIMILARITY SCORE 294.9344978165939======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
Stripped:  } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0]
======SIMILARITY SCORE 402.12690114068437======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
Stripped:  } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed});
======SIMILARITY SCORE 339.62940369071214======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
Stripped:  } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed});
======SIMILARITY SCORE 302.5401069518716======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
Stripped:  } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration
======SIMILARITY SCORE 341.98717948717945======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
Stripped:  } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1))
======SIMILARITY SCORE 500.0878117316474======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      } else {
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
Stripped:  } else { parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true);
======SIMILARITY SCORE 480.891195645294======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content);
Stripped:  parsed = JSON.parse(message.content);
======SIMILARITY SCORE 410.8879781420765======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content);
      }
Stripped:  parsed = JSON.parse(message.content); }
======SIMILARITY SCORE 391.26676602086434======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
Stripped:  parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0]
======SIMILARITY SCORE 498.5667839163547======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
Stripped:  parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed});
======SIMILARITY SCORE 437.3712074763517======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
Stripped:  parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed});
======SIMILARITY SCORE 400.05256925872243======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
Stripped:  parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration
======SIMILARITY SCORE 439.45267920677753======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
Stripped:  parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1))
======SIMILARITY SCORE 597.5371622912606======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
Stripped:  parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true);
======SIMILARITY SCORE 475.66642908054166======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        parsed = JSON.parse(message.content);
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
Stripped:  parsed = JSON.parse(message.content); } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => {
======SIMILARITY SCORE 187.5======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
Stripped:  }
======SIMILARITY SCORE 186.37362637362634======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
Stripped:  } // let jsonData = message.content.split("```json")[1].split("```")[0]
======SIMILARITY SCORE 298.0324074074074======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
Stripped:  } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed});
======SIMILARITY SCORE 242.7374927218166======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
Stripped:  } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed});
======SIMILARITY SCORE 205.31693077564637======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
Stripped:  } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration
======SIMILARITY SCORE 244.64769647696474======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
Stripped:  } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1))
======SIMILARITY SCORE 402.7247688373008======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
Stripped:  } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true);
======SIMILARITY SCORE 280.49879574236655======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
Stripped:  } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => {
======SIMILARITY SCORE 282.0175438596491======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  } // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 285.56776556776555======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      // let jsonData = message.content.split("```json")[1].split("```")[0]
Stripped:  // let jsonData = message.content.split("```json")[1].split("```")[0]
======SIMILARITY SCORE 397.23637927493064======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
Stripped:  // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed});
======SIMILARITY SCORE 341.92262320054385======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
Stripped:  // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed});
======SIMILARITY SCORE 304.43256743256745======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
Stripped:  // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration
======SIMILARITY SCORE 343.7466938148137======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
Stripped:  // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1))
======SIMILARITY SCORE 501.8178479618068======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
Stripped:  // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true);
======SIMILARITY SCORE 379.56464300726594======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
Stripped:  // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => {
======SIMILARITY SCORE 381.05968920946896======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 346.24003447532857======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      // let jsonData = message.content.split("```json")[1].split("```")[0]
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  // let jsonData = message.content.split("```json")[1].split("```")[0] setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 480.7765151515152======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizData({questions: parsed});
Stripped:  setQuizData({questions: parsed});
======SIMILARITY SCORE 428.26182440884907======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
Stripped:  setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed});
======SIMILARITY SCORE 393.8413547237077======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
Stripped:  setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration
======SIMILARITY SCORE 432.57575757575756======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
Stripped:  setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1))
======SIMILARITY SCORE 590.4629852905716======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
Stripped:  setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true);
======SIMILARITY SCORE 467.1483925910155======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
Stripped:  setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => {
======SIMILARITY SCORE 467.75568181818187======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 432.47499626809974======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 481.5037164093768======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizData({questions: parsed});
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
Stripped:  setQuizData({questions: parsed}); console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 377.99122205951977======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Set quiz data: ", {questions: parsed});
Stripped:  console.log("Set quiz data: ", {questions: parsed});
======SIMILARITY SCORE 347.2186398656987======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
Stripped:  console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration
======SIMILARITY SCORE 386.05401979926694======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
Stripped:  console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1))
======SIMILARITY SCORE 544.0285224495751======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
Stripped:  console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true);
======SIMILARITY SCORE 420.27728080851136======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
Stripped:  console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => {
======SIMILARITY SCORE 420.56370656370655======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 385.13513513513516======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 434.1094941094941======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
Stripped:  console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 411.84362044516763======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      console.log("Set quiz data: ", {questions: parsed});
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
Stripped:  console.log("Set quiz data: ", {questions: parsed}); setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id);
======SIMILARITY SCORE 295.9669022960162======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setMsRemaining(50 * 1000); // Set to actual quiz duration
Stripped:  setMsRemaining(50 * 1000); // Set to actual quiz duration
======SIMILARITY SCORE 335.9885473176612======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
Stripped:  setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1))
======SIMILARITY SCORE 494.5094517006346======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
Stripped:  setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true);
======SIMILARITY SCORE 370.2506791478913======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
Stripped:  setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => {
======SIMILARITY SCORE 373.6244299535439======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 338.5031017287674======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 389.69562658853874======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
Stripped:  setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 367.6553016967015======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
Stripped:  setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id);
======SIMILARITY SCORE 346.5684887914574======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setMsRemaining(50 * 1000); // Set to actual quiz duration
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
Stripped:  setMsRemaining(50 * 1000); // Set to actual quiz duration setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); }
======SIMILARITY SCORE 361.6332497911445======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setAnswers(Array(parsed.length).fill(-1))
Stripped:  setAnswers(Array(parsed.length).fill(-1))
======SIMILARITY SCORE 529.1503515641447======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
Stripped:  setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true);
======SIMILARITY SCORE 411.9101565722917======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
Stripped:  setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => {
======SIMILARITY SCORE 415.47785083349936======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 381.9649698960044======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 433.0773169482847======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
Stripped:  setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 410.4696589458389======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
Stripped:  setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id);
======SIMILARITY SCORE 389.31746031746025======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
Stripped:  setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); }
======SIMILARITY SCORE 396.94194907001656======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setAnswers(Array(parsed.length).fill(-1))
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
Stripped:  setAnswers(Array(parsed.length).fill(-1)) setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250;
======SIMILARITY SCORE 651.5015991760179======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizStarted(true);
Stripped:  setQuizStarted(true);
======SIMILARITY SCORE 539.7524026485853======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizStarted(true);
      const id = setInterval(() => {
Stripped:  setQuizStarted(true); const id = setInterval(() => {
======SIMILARITY SCORE 543.3774052650219======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 509.923542529468======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 562.1430674124229======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
Stripped:  setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 539.9968428326345======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
Stripped:  setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id);
======SIMILARITY SCORE 518.7984496124031======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
Stripped:  setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); }
======SIMILARITY SCORE 526.1044464461186======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
Stripped:  setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250;
======SIMILARITY SCORE 561.6242934450536======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setQuizStarted(true);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
Stripped:  setQuizStarted(true); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; })
======SIMILARITY SCORE 386.8181696224947======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
Stripped:  const id = setInterval(() => {
======SIMILARITY SCORE 396.24175824175825======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 363.52336326955617======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 417.40011926058435======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 395.47428891691186======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id);
======SIMILARITY SCORE 374.2829204693611======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); }
======SIMILARITY SCORE 381.82068408690543======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250;
======SIMILARITY SCORE 417.3529988624328======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; })
======SIMILARITY SCORE 377.54070746771475======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250);
======SIMILARITY SCORE 409.2043314500942======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
Stripped:  setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 381.1755496562522======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 435.95553917956283======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 414.9923966290582======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id);
======SIMILARITY SCORE 393.7639520463001======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); }
======SIMILARITY SCORE 404.60025497101776======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250;
======SIMILARITY SCORE 440.0515247972875======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; })
======SIMILARITY SCORE 400.10730707529206======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250);
======SIMILARITY SCORE 476.23448271937593======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id);
======SIMILARITY SCORE 311.7647058823529======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
Stripped:  if(msRemaining <= 0){
======SIMILARITY SCORE 371.7647058823529======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
Stripped:  if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 355.10224266251265======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
Stripped:  if(msRemaining <= 0){ determineScore(); clearInterval(id);
======SIMILARITY SCORE 333.84072927416577======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
Stripped:  if(msRemaining <= 0){ determineScore(); clearInterval(id); }
======SIMILARITY SCORE 347.32413904648155======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
Stripped:  if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250;
======SIMILARITY SCORE 382.7016428192899======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
Stripped:  if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; })
======SIMILARITY SCORE 342.69342628475755======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
Stripped:  if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250);
======SIMILARITY SCORE 419.22364308042063======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
Stripped:  if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id);
======SIMILARITY SCORE 247.88805389997412======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 483.0575980392157======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
Stripped:  determineScore();
======SIMILARITY SCORE 473.27258772361404======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
Stripped:  determineScore(); clearInterval(id);
======SIMILARITY SCORE 451.9509145940255======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
              }
Stripped:  determineScore(); clearInterval(id); }
======SIMILARITY SCORE 467.0248599439776======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
Stripped:  determineScore(); clearInterval(id); } return msRemaining - 250;
======SIMILARITY SCORE 502.30375782259455======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
Stripped:  determineScore(); clearInterval(id); } return msRemaining - 250; })
======SIMILARITY SCORE 462.1417797888386======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
Stripped:  determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250);
======SIMILARITY SCORE 538.8499027797027======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
Stripped:  determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id);
======SIMILARITY SCORE 367.46054519368727======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 234.1272118603539======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 381.44129348856757======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
Stripped:  clearInterval(id);
======SIMILARITY SCORE 360.2319436288901======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
Stripped:  clearInterval(id); }
======SIMILARITY SCORE 379.0589784419402======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
              return msRemaining - 250;
Stripped:  clearInterval(id); } return msRemaining - 250;
======SIMILARITY SCORE 414.4048856548856======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
Stripped:  clearInterval(id); } return msRemaining - 250; })
======SIMILARITY SCORE 374.5562130177515======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
Stripped:  clearInterval(id); } return msRemaining - 250; }) }, 250);
======SIMILARITY SCORE 452.16487390400437======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
Stripped:  clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id);
======SIMILARITY SCORE 280.8035102152749======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 147.47017688194154======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 352.89113598972756======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
Stripped:  clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id); } const startQuiz = () => {
======SIMILARITY SCORE 224.99999999999997======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
Stripped:  }
======SIMILARITY SCORE 256.1141304347826======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
              return msRemaining - 250;
Stripped:  } return msRemaining - 250;
======SIMILARITY SCORE 291.5468660149511======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
              return msRemaining - 250;
          })
Stripped:  } return msRemaining - 250; })
======SIMILARITY SCORE 254.76923076923077======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
              return msRemaining - 250;
          })
      }, 250);
Stripped:  } return msRemaining - 250; }) }, 250);
======SIMILARITY SCORE 333.263488737559======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
Stripped:  } return msRemaining - 250; }) }, 250); setTimerId(id);
======SIMILARITY SCORE 161.90476190476193======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  } return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 236.69339442535323======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
Stripped:  } return msRemaining - 250; }) }, 250); setTimerId(id); } const startQuiz = () => {
======SIMILARITY SCORE 275.9247648902821======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
Stripped:  } return msRemaining - 250; }) }, 250); setTimerId(id); } const startQuiz = () => { // Start loading the quiz
======SIMILARITY SCORE 365.52473262032083======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
Stripped:  return msRemaining - 250;
======SIMILARITY SCORE 400.94391317412897======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
Stripped:  return msRemaining - 250; })
======SIMILARITY SCORE 364.18446418446416======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
      }, 250);
Stripped:  return msRemaining - 250; }) }, 250);
======SIMILARITY SCORE 442.70702786079244======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
Stripped:  return msRemaining - 250; }) }, 250); setTimerId(id);
======SIMILARITY SCORE 271.33990507484486======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 138.0065717415115======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 346.1279461279462======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
Stripped:  return msRemaining - 250; }) }, 250); setTimerId(id); } const startQuiz = () => {
======SIMILARITY SCORE 385.33260475683755======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
Stripped:  return msRemaining - 250; }) }, 250); setTimerId(id); } const startQuiz = () => { // Start loading the quiz
======SIMILARITY SCORE 378.90396456133504======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  return msRemaining - 250; }) }, 250); setTimerId(id); } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 307.75446748898077======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
Stripped:  })
======SIMILARITY SCORE 274.68023779499185======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
      }, 250);
Stripped:  }) }, 250);
======SIMILARITY SCORE 363.2505175983437======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
      }, 250);
      setTimerId(id);
Stripped:  }) }, 250); setTimerId(id);
======SIMILARITY SCORE 191.90476190476193======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 270.74329062280873======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
Stripped:  }) }, 250); setTimerId(id); } const startQuiz = () => {
======SIMILARITY SCORE 311.4685960591133======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
Stripped:  }) }, 250); setTimerId(id); } const startQuiz = () => { // Start loading the quiz
======SIMILARITY SCORE 305.5946275946276======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  }) }, 250); setTimerId(id); } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 339.531279178338======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  }) }, 250); setTimerId(id); } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 302.47791424262016======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
Stripped:  }, 250);
======SIMILARITY SCORE 394.71819645732694======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
      setTimerId(id);
Stripped:  }, 250); setTimerId(id);
======SIMILARITY SCORE 223.35766423357666======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
      setTimerId(id);
    }
Stripped:  }, 250); setTimerId(id); }
======SIMILARITY SCORE 302.272210861168======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
Stripped:  }, 250); setTimerId(id); } const startQuiz = () => {
======SIMILARITY SCORE 342.9666119321291======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
Stripped:  }, 250); setTimerId(id); } const startQuiz = () => { // Start loading the quiz
======SIMILARITY SCORE 337.07553707553706======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  }, 250); setTimerId(id); } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 371.0121886592475======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  }, 250); setTimerId(id); } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 398.31063245697396======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
Stripped:  }, 250); setTimerId(id); } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({
======SIMILARITY SCORE 514.1719359110664======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
Stripped:  setTimerId(id);
======SIMILARITY SCORE 342.83502252252254======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
Stripped:  setTimerId(id); }
======SIMILARITY SCORE 209.5016891891892======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
Stripped:  setTimerId(id); }
======SIMILARITY SCORE 422.76302276302283======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
    const startQuiz = () => {
Stripped:  setTimerId(id); } const startQuiz = () => {
======SIMILARITY SCORE 465.0129439784612======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
Stripped:  setTimerId(id); } const startQuiz = () => { // Start loading the quiz
======SIMILARITY SCORE 459.3950396767298======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  setTimerId(id); } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 493.33169126044027======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  setTimerId(id); } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 520.6108547571963======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
Stripped:  setTimerId(id); } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({
======SIMILARITY SCORE 458.97676595351015======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
Stripped:  setTimerId(id); } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1',
======SIMILARITY SCORE 133.33333333333337======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
Stripped:  }
======SIMILARITY SCORE 228.34138486312403======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const startQuiz = () => {
Stripped:  } const startQuiz = () => {
======SIMILARITY SCORE 273.08662741799833======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const startQuiz = () => {
        // Start loading the quiz
Stripped:  } const startQuiz = () => { // Start loading the quiz
======SIMILARITY SCORE 268.3326825458805======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 302.26933412959096======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 329.5761307127635======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
Stripped:  } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({
======SIMILARITY SCORE 267.90697674418607======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
Stripped:  } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1',
======SIMILARITY SCORE 285.1931330472103======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
Stripped:  } const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1', role: systemRole,
======SIMILARITY SCORE 228.70370370370375======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
Stripped:  const startQuiz = () => {
======SIMILARITY SCORE 273.47807577692635======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
Stripped:  const startQuiz = () => { // Start loading the quiz
======SIMILARITY SCORE 268.71794871794873======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 302.6546003016592======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 329.93782879005266======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
Stripped:  const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({
======SIMILARITY SCORE 268.23889070859263======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
Stripped:  const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1',
======SIMILARITY SCORE 285.49783549783547======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
Stripped:  const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1', role: systemRole,
======SIMILARITY SCORE 244.9585502217081======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
Stripped:  const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}`
======SIMILARITY SCORE 339.8148148148149======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
Stripped:  const startQuiz = () => {
======SIMILARITY SCORE 384.5891868880375======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
Stripped:  const startQuiz = () => { // Start loading the quiz
======SIMILARITY SCORE 379.8290598290598======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 413.7657114127703======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 441.04893990116375======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
Stripped:  const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({
======SIMILARITY SCORE 379.3500018197038======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
Stripped:  const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1',
======SIMILARITY SCORE 396.6089466089466======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
Stripped:  const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1', role: systemRole,
======SIMILARITY SCORE 356.06966133281924======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
Stripped:  const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}`
======SIMILARITY SCORE 424.26795026073006======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const startQuiz = () => {
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
Stripped:  const startQuiz = () => { // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}` });
======SIMILARITY SCORE 343.6001987001697======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // Start loading the quiz
Stripped:  // Start loading the quiz
======SIMILARITY SCORE 345.53797850501144======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 379.47463008872194======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // Start loading the quiz
        let systemRole: Role = 'system';
Stripped:  // Start loading the quiz let systemRole: Role = 'system';
======SIMILARITY SCORE 406.8998495534142======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
Stripped:  // Start loading the quiz let systemRole: Role = 'system'; append({
======SIMILARITY SCORE 345.2068353768569======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
Stripped:  // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1',
======SIMILARITY SCORE 365.7789945246391======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
Stripped:  // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1', role: systemRole,
======SIMILARITY SCORE 325.3573494174998======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
Stripped:  // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}`
======SIMILARITY SCORE 393.6733790461736======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
Stripped:  // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}` });
======SIMILARITY SCORE 248.95808125621792======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // Start loading the quiz
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
Stripped:  // Start loading the quiz let systemRole: Role = 'system'; append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}` }); }
======SIMILARITY SCORE 383.7412587412588======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let systemRole: Role = 'system';
Stripped:  let systemRole: Role = 'system';
======SIMILARITY SCORE 417.67791032496916======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let systemRole: Role = 'system';
Stripped:  let systemRole: Role = 'system';
======SIMILARITY SCORE 445.3145057766368======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let systemRole: Role = 'system';
        append({
Stripped:  let systemRole: Role = 'system'; append({
======SIMILARITY SCORE 384.88733208146755======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let systemRole: Role = 'system';
        append({
          id: '1',
Stripped:  let systemRole: Role = 'system'; append({ id: '1',
======SIMILARITY SCORE 408.5195530726257======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
Stripped:  let systemRole: Role = 'system'; append({ id: '1', role: systemRole,
======SIMILARITY SCORE 370.8204334365325======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
Stripped:  let systemRole: Role = 'system'; append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}`
======SIMILARITY SCORE 439.22222222222223======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
Stripped:  let systemRole: Role = 'system'; append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}` });
======SIMILARITY SCORE 294.4566813509545======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
Stripped:  let systemRole: Role = 'system'; append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}` }); }
======SIMILARITY SCORE 161.12334801762114======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        let systemRole: Role = 'system';
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
Stripped:  let systemRole: Role = 'system'; append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}` }); }
======SIMILARITY SCORE 264.7058823529412======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===

Stripped:  
======SIMILARITY SCORE 304.4476327116213======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
Stripped:  append({
======SIMILARITY SCORE 246.62063953488374======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
          id: '1',
Stripped:  append({ id: '1',
======SIMILARITY SCORE 273.28767123287673======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
          id: '1',
          role: systemRole,
Stripped:  append({ id: '1', role: systemRole,
======SIMILARITY SCORE 241.3773796192609======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
Stripped:  append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}`
======SIMILARITY SCORE 311.1111111111111======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
Stripped:  append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}` });
======SIMILARITY SCORE 166.32302405498285======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
Stripped:  append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}` }); }
======SIMILARITY SCORE 201.01781170483463======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
Stripped:  append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => {
======SIMILARITY SCORE 366.9476327116213======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
Stripped:  append({
======SIMILARITY SCORE 309.1206395348837======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
          id: '1',
Stripped:  append({ id: '1',
======SIMILARITY SCORE 335.78767123287673======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
          id: '1',
          role: systemRole,
Stripped:  append({ id: '1', role: systemRole,
======SIMILARITY SCORE 303.87737961926086======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
Stripped:  append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}`
======SIMILARITY SCORE 373.6111111111111======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
Stripped:  append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}` });
======SIMILARITY SCORE 228.82302405498285======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
Stripped:  append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}` }); }
======SIMILARITY SCORE 263.5178117048346======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
Stripped:  append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => {
======SIMILARITY SCORE 269.91534067727457======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        append({
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
Stripped:  append({ id: '1', role: systemRole, content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
======SIMILARITY SCORE 237.60015634160644======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: '1',
Stripped:  id: '1',
======SIMILARITY SCORE 268.978102189781======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: '1',
          role: systemRole,
Stripped:  id: '1', role: systemRole,
======SIMILARITY SCORE 240.6939135548368======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
Stripped:  id: '1', role: systemRole, content: `Medications: ${medicationInfo}`
======SIMILARITY SCORE 310.56466302367943======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
Stripped:  id: '1', role: systemRole, content: `Medications: ${medicationInfo}` });
======SIMILARITY SCORE 165.76576576576582======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
Stripped:  id: '1', role: systemRole, content: `Medications: ${medicationInfo}` }); }
======SIMILARITY SCORE 202.23978919631094======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
Stripped:  id: '1', role: systemRole, content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => {
======SIMILARITY SCORE 208.27441738675043======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
Stripped:  id: '1', role: systemRole, content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
======SIMILARITY SCORE 348.01169590643275======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          id: '1',
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
Stripped:  id: '1', role: systemRole, content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers);
======SIMILARITY SCORE 385.02906976744185======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: systemRole,
Stripped:  role: systemRole,
======SIMILARITY SCORE 358.5700914392685======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: systemRole,
          content: `Medications: ${medicationInfo}`
Stripped:  role: systemRole, content: `Medications: ${medicationInfo}`
======SIMILARITY SCORE 428.5396061659093======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
Stripped:  role: systemRole, content: `Medications: ${medicationInfo}` });
======SIMILARITY SCORE 283.7033121916843======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
Stripped:  role: systemRole, content: `Medications: ${medicationInfo}` }); }
======SIMILARITY SCORE 150.36997885835095======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
Stripped:  role: systemRole, content: `Medications: ${medicationInfo}` }); }
======SIMILARITY SCORE 319.8309823357479======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
Stripped:  role: systemRole, content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => {
======SIMILARITY SCORE 325.4599975470135======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
Stripped:  role: systemRole, content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
======SIMILARITY SCORE 465.11697650008546======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
Stripped:  role: systemRole, content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers);
======SIMILARITY SCORE 282.47359290247493======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          role: systemRole,
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
Stripped:  role: systemRole, content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); }
======SIMILARITY SCORE 341.31971720345643======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Medications: ${medicationInfo}`
Stripped:  content: `Medications: ${medicationInfo}`
======SIMILARITY SCORE 411.7425692052558======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Medications: ${medicationInfo}`
        });
Stripped:  content: `Medications: ${medicationInfo}` });
======SIMILARITY SCORE 266.9248693242648======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Medications: ${medicationInfo}`
        });
    }
Stripped:  content: `Medications: ${medicationInfo}` }); }
======SIMILARITY SCORE 133.59153599093145======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Medications: ${medicationInfo}`
        });
    }
Stripped:  content: `Medications: ${medicationInfo}` }); }
======SIMILARITY SCORE 307.4274644476732======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
Stripped:  content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => {
======SIMILARITY SCORE 314.98114349646164======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
Stripped:  content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
======SIMILARITY SCORE 454.5013198587433======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
Stripped:  content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers);
======SIMILARITY SCORE 271.84079601990055======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
Stripped:  content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); }
======SIMILARITY SCORE 138.50746268656718======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          content: `Medications: ${medicationInfo}`
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
Stripped:  content: `Medications: ${medicationInfo}` }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); }
======SIMILARITY SCORE 355.3606237816764======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        });
Stripped:  });
======SIMILARITY SCORE 212.57982120051088======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        });
    }
Stripped:  }); }
======SIMILARITY SCORE 276.6103059581321======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
Stripped:  }); } const setAnswer = (answerIndex: number, questionIndex: number) => {
======SIMILARITY SCORE 285.6028961292119======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
Stripped:  }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
======SIMILARITY SCORE 424.91509415003713======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
Stripped:  }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers);
======SIMILARITY SCORE 242.21969409682723======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
Stripped:  }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); }
======SIMILARITY SCORE 108.88636076349385======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
Stripped:  }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); }
======SIMILARITY SCORE 320.36778036778037======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        });
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
Stripped:  }); } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); } // make selected answer more obvious
======SIMILARITY SCORE 133.33333333333337======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
Stripped:  }
======SIMILARITY SCORE 203.33333333333337======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
Stripped:  } const setAnswer = (answerIndex: number, questionIndex: number) => {
======SIMILARITY SCORE 212.07981786527387======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
Stripped:  } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
======SIMILARITY SCORE 351.32954337062165======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
Stripped:  } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers);
======SIMILARITY SCORE 168.62745098039218======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
Stripped:  } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); }
======SIMILARITY SCORE 246.67295894289762======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
Stripped:  } const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); } // make selected answer more obvious
======SIMILARITY SCORE 203.74531835205994======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => {
======SIMILARITY SCORE 212.361673414305======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
======SIMILARITY SCORE 351.57894736842104======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers);
======SIMILARITY SCORE 168.8734030197445======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); }
======SIMILARITY SCORE 246.86609686609688======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); } // make selected answer more obvious
======SIMILARITY SCORE 217.98997374074958======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
    const determineScore = () => {
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); } // make selected answer more obvious const determineScore = () => {
======SIMILARITY SCORE 307.1935942141289======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => {
======SIMILARITY SCORE 315.8099492763739======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
======SIMILARITY SCORE 455.02722323049======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers);
======SIMILARITY SCORE 272.32167888181345======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); }
======SIMILARITY SCORE 138.98834554848008======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); }
======SIMILARITY SCORE 350.31437272816584======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); } // make selected answer more obvious
======SIMILARITY SCORE 134.92975734355042======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); } // make selected answer more obvious
======SIMILARITY SCORE 321.43824960281853======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
    const determineScore = () => {
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); } // make selected answer more obvious const determineScore = () => {
======SIMILARITY SCORE 288.3559550012228======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const setAnswer = (answerIndex: number, questionIndex: number) => {
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
Stripped:  const setAnswer = (answerIndex: number, questionIndex: number) => { const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); } // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
======SIMILARITY SCORE 328.265977443609======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
Stripped:  const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
======SIMILARITY SCORE 466.94154741692944======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
Stripped:  const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers);
======SIMILARITY SCORE 284.1487279843444======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
Stripped:  const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); }
======SIMILARITY SCORE 150.81539465101108======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
Stripped:  const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); }
======SIMILARITY SCORE 365.6078296703297======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
Stripped:  const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); } // make selected answer more obvious
======SIMILARITY SCORE 150.22321428571428======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
Stripped:  const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); } // make selected answer more obvious
======SIMILARITY SCORE 337.6601901612236======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
    const determineScore = () => {
Stripped:  const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); } // make selected answer more obvious const determineScore = () => {
======SIMILARITY SCORE 302.63731540327285======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
Stripped:  const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); } // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
======SIMILARITY SCORE 352.52747252747247======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c);
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
Stripped:  const nextAnswers = answers.map((c, i) => i === questionIndex ? answerIndex : c); setAnswers(nextAnswers); } // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100;
======SIMILARITY SCORE 529.9561403508771======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setAnswers(nextAnswers);
Stripped:  setAnswers(nextAnswers);
======SIMILARITY SCORE 347.1107055961071======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setAnswers(nextAnswers);
    }
Stripped:  setAnswers(nextAnswers); }
======SIMILARITY SCORE 213.77737226277372======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setAnswers(nextAnswers);
    }
Stripped:  setAnswers(nextAnswers); }
======SIMILARITY SCORE 439.6662245800177======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
Stripped:  setAnswers(nextAnswers); } // make selected answer more obvious
======SIMILARITY SCORE 224.2816091954023======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
Stripped:  setAnswers(nextAnswers); } // make selected answer more obvious
======SIMILARITY SCORE 412.9650682100041======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
    const determineScore = () => {
Stripped:  setAnswers(nextAnswers); } // make selected answer more obvious const determineScore = () => {
======SIMILARITY SCORE 377.28633057776574======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
Stripped:  setAnswers(nextAnswers); } // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
======SIMILARITY SCORE 427.39040450166453======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
Stripped:  setAnswers(nextAnswers); } // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100;
======SIMILARITY SCORE 566.7464678178965======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setAnswers(nextAnswers);
    }
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
Stripped:  setAnswers(nextAnswers); } // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score);
======SIMILARITY SCORE 133.33333333333337======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
Stripped:  }
======SIMILARITY SCORE 242.230252968508======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    // make selected answer more obvious
Stripped:  } // make selected answer more obvious
======SIMILARITY SCORE 218.66290018832393======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    // make selected answer more obvious
    const determineScore = () => {
Stripped:  } // make selected answer more obvious const determineScore = () => {
======SIMILARITY SCORE 189.93840339640235======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
Stripped:  } // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
======SIMILARITY SCORE 241.54982948086393======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
Stripped:  } // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100;
======SIMILARITY SCORE 380.9113782499301======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
Stripped:  } // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score);
======SIMILARITY SCORE 430.8228238821766======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
Stripped:  } // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true);
======SIMILARITY SCORE 242.59549973835692======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
Stripped:  // make selected answer more obvious
======SIMILARITY SCORE 219.02494762902305======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
    const determineScore = () => {
Stripped:  // make selected answer more obvious const determineScore = () => {
======SIMILARITY SCORE 190.17471025774086======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
Stripped:  // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
======SIMILARITY SCORE 241.73918566982147======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
Stripped:  // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100;
======SIMILARITY SCORE 381.0985551245292======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
Stripped:  // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score);
======SIMILARITY SCORE 430.9990249091393======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
Stripped:  // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true);
======SIMILARITY SCORE 524.771287825475======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
Stripped:  // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true);
======SIMILARITY SCORE 385.45264259549975======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
Stripped:  // make selected answer more obvious
======SIMILARITY SCORE 170.06802721088434======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
Stripped:  // make selected answer more obvious
======SIMILARITY SCORE 361.8820904861659======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
    const determineScore = () => {
Stripped:  // make selected answer more obvious const determineScore = () => {
======SIMILARITY SCORE 333.0318531148837======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
Stripped:  // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
======SIMILARITY SCORE 384.59632852696427======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
Stripped:  // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100;
======SIMILARITY SCORE 523.955697981672======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
Stripped:  // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score);
======SIMILARITY SCORE 573.8561677662822======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
Stripped:  // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true);
======SIMILARITY SCORE 667.6284306826178======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
Stripped:  // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true);
======SIMILARITY SCORE 177.83251231527092======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    // make selected answer more obvious
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
Stripped:  // make selected answer more obvious const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true);
======SIMILARITY SCORE 211.97259285971873======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
Stripped:  const determineScore = () => {
======SIMILARITY SCORE 194.42836879432625======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
Stripped:  const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
======SIMILARITY SCORE 245.0371634837654======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
Stripped:  const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100;
======SIMILARITY SCORE 384.3620883936397======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
Stripped:  const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score);
======SIMILARITY SCORE 434.05172413793105======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
Stripped:  const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true);
======SIMILARITY SCORE 527.7362977711409======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
Stripped:  const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true);
======SIMILARITY SCORE 321.33769538349685======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
Stripped:  const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId);
======SIMILARITY SCORE 411.9725928597187======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
Stripped:  const determineScore = () => {
======SIMILARITY SCORE 394.4283687943263======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
Stripped:  const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
======SIMILARITY SCORE 445.0371634837654======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
Stripped:  const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100;
======SIMILARITY SCORE 584.3620883936396======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
Stripped:  const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score);
======SIMILARITY SCORE 634.051724137931======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
Stripped:  const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true);
======SIMILARITY SCORE 727.7362977711409======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
Stripped:  const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true);
======SIMILARITY SCORE 237.94037940379403======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
Stripped:  const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true);
======SIMILARITY SCORE 521.3376953834968======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
Stripped:  const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId);
======SIMILARITY SCORE 368.7763713080169======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const determineScore = () => {
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
Stripped:  const determineScore = () => { const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId); }
======SIMILARITY SCORE 291.95613965360394======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
Stripped:  const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
======SIMILARITY SCORE 342.52785583720834======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
Stripped:  const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100;
======SIMILARITY SCORE 482.033793486578======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
Stripped:  const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score);
======SIMILARITY SCORE 531.7966972333714======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
Stripped:  const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true);
======SIMILARITY SCORE 626.7423053137339======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
Stripped:  const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true);
======SIMILARITY SCORE 136.94638694638698======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
Stripped:  const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true);
======SIMILARITY SCORE 420.1107364090789======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
Stripped:  const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId);
======SIMILARITY SCORE 267.5324675324676======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
Stripped:  const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId); }
======SIMILARITY SCORE 134.19913419913422======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0);
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
Stripped:  const correct = quizData.questions.reduce((acc, q, i) => acc + (q.correctAnswer === answers[i] ? 1 : 0), 0); const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId); }
======SIMILARITY SCORE 402.8307527369441======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const score = (correct / quizData.questions.length) * 100;
Stripped:  const score = (correct / quizData.questions.length) * 100;
======SIMILARITY SCORE 546.3355759298212======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
Stripped:  const score = (correct / quizData.questions.length) * 100; setScore(score);
======SIMILARITY SCORE 605.0883095037847======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
Stripped:  const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true);
======SIMILARITY SCORE 700.7342504580913======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
Stripped:  const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true);
======SIMILARITY SCORE 210.93833209074444======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
Stripped:  const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true);
======SIMILARITY SCORE 494.84375645563335======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
Stripped:  const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId);
======SIMILARITY SCORE 342.06599713055954======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
Stripped:  const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId); }
======SIMILARITY SCORE 208.73266379722617======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
Stripped:  const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId); }
======SIMILARITY SCORE 387.4755653294237======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        const score = (correct / quizData.questions.length) * 100;
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
Stripped:  const score = (correct / quizData.questions.length) * 100; setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId); } const goToNextQuestion = () => {
======SIMILARITY SCORE 772.1356259039048======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setScore(score);
Stripped:  setScore(score);
======SIMILARITY SCORE 847.5321162947938======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setScore(score);
        // setQuizFinished(true);
Stripped:  setScore(score); // setQuizFinished(true);
======SIMILARITY SCORE 955.6782713085233======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
Stripped:  setScore(score); // setQuizFinished(true); setPaused(true);
======SIMILARITY SCORE 465.88235294117646======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
Stripped:  setScore(score); // setQuizFinished(true); setPaused(true);
======SIMILARITY SCORE 751.6936671575846======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
Stripped:  setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId);
======SIMILARITY SCORE 598.639455782313======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
Stripped:  setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId); }
======SIMILARITY SCORE 465.3061224489796======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
Stripped:  setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId); }
======SIMILARITY SCORE 641.4632400314982======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
Stripped:  setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId); } const goToNextQuestion = () => {
======SIMILARITY SCORE 620.645905420992======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
Stripped:  setScore(score); // setQuizFinished(true); setPaused(true); clearInterval(timerId); } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) {
======SIMILARITY SCORE 614.0487229374509======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // setQuizFinished(true);
Stripped:  // setQuizFinished(true);
======SIMILARITY SCORE 725.7569694544484======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // setQuizFinished(true);
        setPaused(true);
Stripped:  // setQuizFinished(true); setPaused(true);
======SIMILARITY SCORE 235.96105108710148======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // setQuizFinished(true);
        setPaused(true);
Stripped:  // setQuizFinished(true); setPaused(true);
======SIMILARITY SCORE 523.6250432376339======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
Stripped:  // setQuizFinished(true); setPaused(true); clearInterval(timerId);
======SIMILARITY SCORE 370.6380876372896======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
Stripped:  // setQuizFinished(true); setPaused(true); clearInterval(timerId); }
======SIMILARITY SCORE 237.3047543039562======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
Stripped:  // setQuizFinished(true); setPaused(true); clearInterval(timerId); }
======SIMILARITY SCORE 414.94473446662914======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
Stripped:  // setQuizFinished(true); setPaused(true); clearInterval(timerId); } const goToNextQuestion = () => {
======SIMILARITY SCORE 395.92837134853943======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
Stripped:  // setQuizFinished(true); setPaused(true); clearInterval(timerId); } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) {
======SIMILARITY SCORE 631.1310965063992======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        // setQuizFinished(true);
        setPaused(true);
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
Stripped:  // setQuizFinished(true); setPaused(true); clearInterval(timerId); } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true);
======SIMILARITY SCORE 739.9927687610477======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setPaused(true);
Stripped:  setPaused(true);
======SIMILARITY SCORE 250.19685039370074======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setPaused(true);
Stripped:  setPaused(true);
======SIMILARITY SCORE 547.8003784295174======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setPaused(true);
        clearInterval(timerId);
Stripped:  setPaused(true); clearInterval(timerId);
======SIMILARITY SCORE 394.93464052287584======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setPaused(true);
        clearInterval(timerId);
    }
Stripped:  setPaused(true); clearInterval(timerId); }
======SIMILARITY SCORE 261.60130718954247======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setPaused(true);
        clearInterval(timerId);
    }
Stripped:  setPaused(true); clearInterval(timerId); }
======SIMILARITY SCORE 447.2633527234267======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setPaused(true);
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
Stripped:  setPaused(true); clearInterval(timerId); } const goToNextQuestion = () => {
======SIMILARITY SCORE 430.6910569105691======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setPaused(true);
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
Stripped:  setPaused(true); clearInterval(timerId); } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) {
======SIMILARITY SCORE 668.8661710037175======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setPaused(true);
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
Stripped:  setPaused(true); clearInterval(timerId); } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true);
======SIMILARITY SCORE 456.0424354243542======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setPaused(true);
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
Stripped:  setPaused(true); clearInterval(timerId); } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); }
======SIMILARITY SCORE 309.59488272921106======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
Stripped:  clearInterval(timerId);
======SIMILARITY SCORE 156.86274509803926======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
    }
Stripped:  clearInterval(timerId); }
======SIMILARITY SCORE 213.4639635270152======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
Stripped:  clearInterval(timerId); } const goToNextQuestion = () => {
======SIMILARITY SCORE 202.4745269286754======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
Stripped:  clearInterval(timerId); } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) {
======SIMILARITY SCORE 441.26984126984127======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
Stripped:  clearInterval(timerId); } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true);
======SIMILARITY SCORE 228.4448818897638======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
Stripped:  clearInterval(timerId); } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); }
======SIMILARITY SCORE 458.531052941977======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
Stripped:  clearInterval(timerId);
======SIMILARITY SCORE 305.7989153108052======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
    }
Stripped:  clearInterval(timerId); }
======SIMILARITY SCORE 172.46558197747183======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
    }
Stripped:  clearInterval(timerId); }
======SIMILARITY SCORE 362.40013373978115======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
Stripped:  clearInterval(timerId); } const goToNextQuestion = () => {
======SIMILARITY SCORE 351.41069714144135======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
Stripped:  clearInterval(timerId); } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) {
======SIMILARITY SCORE 590.2060114826072======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
Stripped:  clearInterval(timerId); } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true);
======SIMILARITY SCORE 377.38105210252974======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
Stripped:  clearInterval(timerId); } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); }
======SIMILARITY SCORE 189.88105210252974======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
Stripped:  clearInterval(timerId); } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); }
======SIMILARITY SCORE 407.22396620548======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        clearInterval(timerId);
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
Stripped:  clearInterval(timerId); } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1);
======SIMILARITY SCORE 133.33333333333337======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
Stripped:  }
======SIMILARITY SCORE 205.15545505935552======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const goToNextQuestion = () => {
Stripped:  } const goToNextQuestion = () => {
======SIMILARITY SCORE 201.78861788617888======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
Stripped:  } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) {
======SIMILARITY SCORE 441.2280701754386======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
Stripped:  } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true);
======SIMILARITY SCORE 228.3695652173913======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
Stripped:  } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); }
======SIMILARITY SCORE 261.3681296955318======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
Stripped:  } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1);
======SIMILARITY SCORE 439.3115942028985======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
Stripped:  } const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false);
======SIMILARITY SCORE 205.50269402728415======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
Stripped:  const goToNextQuestion = () => {
======SIMILARITY SCORE 202.1346469622332======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
Stripped:  const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) {
======SIMILARITY SCORE 441.5929203539823======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
Stripped:  const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true);
======SIMILARITY SCORE 228.72807017543857======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
Stripped:  const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); }
======SIMILARITY SCORE 261.64874551971326======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
Stripped:  const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1);
======SIMILARITY SCORE 439.604377104377======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
Stripped:  const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false);
======SIMILARITY SCORE 340.1180786426688======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
Stripped:  const goToNextQuestion = () => {
======SIMILARITY SCORE 336.75003157761785======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
Stripped:  const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) {
======SIMILARITY SCORE 576.208304969367======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
Stripped:  const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true);
======SIMILARITY SCORE 363.3434547908232======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
Stripped:  const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); }
======SIMILARITY SCORE 175.84345479082322======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
Stripped:  const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); }
======SIMILARITY SCORE 396.2641301350979======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
Stripped:  const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1);
======SIMILARITY SCORE 574.2197617197617======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
Stripped:  const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false);
======SIMILARITY SCORE 178.3864283864284======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
Stripped:  const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false);
======SIMILARITY SCORE 420.15117030111037======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    const goToNextQuestion = () => {
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
Stripped:  const goToNextQuestion = () => { if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => {
======SIMILARITY SCORE 299.54974582425564======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(currentQuestionIndex == quizData.questions.length - 1) {
Stripped:  if(currentQuestionIndex == quizData.questions.length - 1) {
======SIMILARITY SCORE 540.216209300838======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
Stripped:  if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true);
======SIMILARITY SCORE 327.29107312440647======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
Stripped:  if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); }
======SIMILARITY SCORE 139.79107312440647======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
Stripped:  if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); }
======SIMILARITY SCORE 364.0770852152966======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
Stripped:  if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1);
======SIMILARITY SCORE 542.3260381593714======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
Stripped:  if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false);
======SIMILARITY SCORE 146.49270482603816======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
Stripped:  if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false);
======SIMILARITY SCORE 387.37893584980736======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
Stripped:  if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => {
======SIMILARITY SCORE 390.10281811700247======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      if(currentQuestionIndex == quizData.questions.length - 1) {
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  if(currentQuestionIndex == quizData.questions.length - 1) { setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 628.7348806799607======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setQuizFinished(true);
Stripped:  setQuizFinished(true);
======SIMILARITY SCORE 417.2262479871175======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setQuizFinished(true);
      }
Stripped:  setQuizFinished(true); }
======SIMILARITY SCORE 229.72624798711752======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setQuizFinished(true);
      }
Stripped:  setQuizFinished(true); }
======SIMILARITY SCORE 465.1862240922549======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
Stripped:  setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1);
======SIMILARITY SCORE 644.4266837169649======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
Stripped:  setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false);
======SIMILARITY SCORE 248.59335038363167======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
Stripped:  setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false);
======SIMILARITY SCORE 487.5112600658164======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
Stripped:  setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => {
======SIMILARITY SCORE 489.5183449167609======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 453.55595398177195======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        setQuizFinished(true);
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  setQuizFinished(true); } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 187.5======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
Stripped:  }
======SIMILARITY SCORE 257.8050443081118======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
Stripped:  } setCurrentQuestionIndex(currentQuestionIndex + 1);
======SIMILARITY SCORE 438.927255985267======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
Stripped:  } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false);
======SIMILARITY SCORE 285.52428085369627======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
Stripped:  } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => {
======SIMILARITY SCORE 288.2113821138211======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 252.48756218905476======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 303.72960372960375======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
Stripped:  } setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 258.24706694271913======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1);
======SIMILARITY SCORE 439.40875232774664======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false);
======SIMILARITY SCORE 285.9016393442623======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => {
======SIMILARITY SCORE 288.5245901639344======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 252.75689223057645======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 303.9906103286385======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 281.5452037006979======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id);
======SIMILARITY SCORE 411.0248447204969======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1);
======SIMILARITY SCORE 592.1865301055244======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false);
======SIMILARITY SCORE 196.35319677219118======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false);
======SIMILARITY SCORE 438.67941712204004======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => {
======SIMILARITY SCORE 441.3023679417122======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 405.5346700083542======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 456.7683881064163======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 434.3229814784757======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id);
======SIMILARITY SCORE 413.1876138433515======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
Stripped:  setCurrentQuestionIndex(currentQuestionIndex + 1); setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); }
======SIMILARITY SCORE 648.477564102564======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setPaused(false);
Stripped:  setPaused(false);
======SIMILARITY SCORE 252.64423076923077======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setPaused(false);
Stripped:  setPaused(false);
======SIMILARITY SCORE 509.3752726292164======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setPaused(false);
      const id = setInterval(() => {
Stripped:  setPaused(false); const id = setInterval(() => {
======SIMILARITY SCORE 517.0386608210442======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 483.7149672033393======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 536.0625068779575======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
Stripped:  setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 513.9724574150804======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
Stripped:  setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id);
======SIMILARITY SCORE 492.77710478497875======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
Stripped:  setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); }
======SIMILARITY SCORE 500.1442307692308======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setPaused(false);
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
Stripped:  setPaused(false); const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250;
======SIMILARITY SCORE 271.4335542378793======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
Stripped:  const id = setInterval(() => {
======SIMILARITY SCORE 280.8571428571429======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 248.1387478849408======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 302.015503875969======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 280.0896735322965======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id);
======SIMILARITY SCORE 258.89830508474574======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); }
======SIMILARITY SCORE 266.4360687022901======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250;
======SIMILARITY SCORE 301.96838347781744======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; })
======SIMILARITY SCORE 386.8181696224947======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
Stripped:  const id = setInterval(() => {
======SIMILARITY SCORE 396.24175824175825======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 363.52336326955617======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 417.40011926058435======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 395.47428891691186======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id);
======SIMILARITY SCORE 374.2829204693611======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); }
======SIMILARITY SCORE 381.82068408690543======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250;
======SIMILARITY SCORE 417.3529988624328======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; })
======SIMILARITY SCORE 377.54070746771475======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      const id = setInterval(() => {
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
Stripped:  const id = setInterval(() => { setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250);
======SIMILARITY SCORE 409.2043314500942======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
Stripped:  setMsRemaining((msRemaining) => {
======SIMILARITY SCORE 381.1755496562522======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){
======SIMILARITY SCORE 435.95553917956283======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 414.9923966290582======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id);
======SIMILARITY SCORE 393.7639520463001======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); }
======SIMILARITY SCORE 404.60025497101776======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250;
======SIMILARITY SCORE 440.0515247972875======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; })
======SIMILARITY SCORE 400.10730707529206======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250);
======SIMILARITY SCORE 476.23448271937593======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          setMsRemaining((msRemaining) => {
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
Stripped:  setMsRemaining((msRemaining) => { if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id);
======SIMILARITY SCORE 311.7647058823529======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
Stripped:  if(msRemaining <= 0){
======SIMILARITY SCORE 371.7647058823529======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
Stripped:  if(msRemaining <= 0){ determineScore();
======SIMILARITY SCORE 355.10224266251265======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
Stripped:  if(msRemaining <= 0){ determineScore(); clearInterval(id);
======SIMILARITY SCORE 333.84072927416577======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
Stripped:  if(msRemaining <= 0){ determineScore(); clearInterval(id); }
======SIMILARITY SCORE 347.32413904648155======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
Stripped:  if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250;
======SIMILARITY SCORE 382.7016428192899======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
Stripped:  if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; })
======SIMILARITY SCORE 342.69342628475755======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
Stripped:  if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250);
======SIMILARITY SCORE 419.22364308042063======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
Stripped:  if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id);
======SIMILARITY SCORE 247.88805389997412======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              if(msRemaining <= 0){
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  if(msRemaining <= 0){ determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 483.0575980392157======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
Stripped:  determineScore();
======SIMILARITY SCORE 473.27258772361404======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
Stripped:  determineScore(); clearInterval(id);
======SIMILARITY SCORE 451.9509145940255======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
              }
Stripped:  determineScore(); clearInterval(id); }
======SIMILARITY SCORE 467.0248599439776======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
Stripped:  determineScore(); clearInterval(id); } return msRemaining - 250;
======SIMILARITY SCORE 502.30375782259455======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
Stripped:  determineScore(); clearInterval(id); } return msRemaining - 250; })
======SIMILARITY SCORE 462.1417797888386======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
Stripped:  determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250);
======SIMILARITY SCORE 538.8499027797027======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
Stripped:  determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id);
======SIMILARITY SCORE 367.46054519368727======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 234.1272118603539======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  determineScore();
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  determineScore(); clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 381.44129348856757======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
Stripped:  clearInterval(id);
======SIMILARITY SCORE 360.2319436288901======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
Stripped:  clearInterval(id); }
======SIMILARITY SCORE 379.0589784419402======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
              return msRemaining - 250;
Stripped:  clearInterval(id); } return msRemaining - 250;
======SIMILARITY SCORE 414.4048856548856======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
Stripped:  clearInterval(id); } return msRemaining - 250; })
======SIMILARITY SCORE 374.5562130177515======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
Stripped:  clearInterval(id); } return msRemaining - 250; }) }, 250);
======SIMILARITY SCORE 452.16487390400437======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
Stripped:  clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id);
======SIMILARITY SCORE 280.8035102152749======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 147.47017688194154======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 328.72989079885633======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                  clearInterval(id);
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
Stripped:  clearInterval(id); } return msRemaining - 250; }) }, 250); setTimerId(id); } if(isLoading) {
======SIMILARITY SCORE 224.99999999999997======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
Stripped:  }
======SIMILARITY SCORE 256.1141304347826======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
              return msRemaining - 250;
Stripped:  } return msRemaining - 250;
======SIMILARITY SCORE 291.5468660149511======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
              return msRemaining - 250;
          })
Stripped:  } return msRemaining - 250; })
======SIMILARITY SCORE 254.76923076923077======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
              return msRemaining - 250;
          })
      }, 250);
Stripped:  } return msRemaining - 250; }) }, 250);
======SIMILARITY SCORE 333.263488737559======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
Stripped:  } return msRemaining - 250; }) }, 250); setTimerId(id);
======SIMILARITY SCORE 161.90476190476193======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  } return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 212.2529644268775======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
Stripped:  } return msRemaining - 250; }) }, 250); setTimerId(id); } if(isLoading) {
======SIMILARITY SCORE 289.57087817191444======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              }
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
      return (
Stripped:  } return msRemaining - 250; }) }, 250); setTimerId(id); } if(isLoading) { return (
======SIMILARITY SCORE 365.52473262032083======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
Stripped:  return msRemaining - 250;
======SIMILARITY SCORE 400.94391317412897======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
Stripped:  return msRemaining - 250; })
======SIMILARITY SCORE 364.18446418446416======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
      }, 250);
Stripped:  return msRemaining - 250; }) }, 250);
======SIMILARITY SCORE 442.70702786079244======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
Stripped:  return msRemaining - 250; }) }, 250); setTimerId(id);
======SIMILARITY SCORE 271.33990507484486======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 138.0065717415115======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  return msRemaining - 250; }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 321.6783216783217======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
Stripped:  return msRemaining - 250; }) }, 250); setTimerId(id); } if(isLoading) {
======SIMILARITY SCORE 399.0090189043068======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
      return (
Stripped:  return msRemaining - 250; }) }, 250); setTimerId(id); } if(isLoading) { return (
======SIMILARITY SCORE 373.983362608955======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
              return msRemaining - 250;
          })
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
      return (
        <Container my="12">
Stripped:  return msRemaining - 250; }) }, 250); setTimerId(id); } if(isLoading) { return ( <Container my="12">
======SIMILARITY SCORE 307.75446748898077======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
Stripped:  })
======SIMILARITY SCORE 274.68023779499185======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
      }, 250);
Stripped:  }) }, 250);
======SIMILARITY SCORE 363.2505175983437======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
      }, 250);
      setTimerId(id);
Stripped:  }) }, 250); setTimerId(id);
======SIMILARITY SCORE 191.90476190476193======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
      }, 250);
      setTimerId(id);
    }
Stripped:  }) }, 250); setTimerId(id); }
======SIMILARITY SCORE 245.73759573759574======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
Stripped:  }) }, 250); setTimerId(id); } if(isLoading) {
======SIMILARITY SCORE 323.63969363969363======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
      return (
Stripped:  }) }, 250); setTimerId(id); } if(isLoading) { return (
======SIMILARITY SCORE 299.99702999703======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
      return (
        <Container my="12">
Stripped:  }) }, 250); setTimerId(id); } if(isLoading) { return ( <Container my="12">
======SIMILARITY SCORE 282.3639495213805======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          })
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
Stripped:  }) }, 250); setTimerId(id); } if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text>
======SIMILARITY SCORE 302.47791424262016======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
Stripped:  }, 250);
======SIMILARITY SCORE 394.71819645732694======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
      setTimerId(id);
Stripped:  }, 250); setTimerId(id);
======SIMILARITY SCORE 223.35766423357666======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
      setTimerId(id);
    }
Stripped:  }, 250); setTimerId(id); }
======SIMILARITY SCORE 277.24301841948903======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
Stripped:  }, 250); setTimerId(id); } if(isLoading) {
======SIMILARITY SCORE 355.1756885090218======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
      return (
Stripped:  }, 250); setTimerId(id); } if(isLoading) { return (
======SIMILARITY SCORE 331.5018315018315======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
      return (
        <Container my="12">
Stripped:  }, 250); setTimerId(id); } if(isLoading) { return ( <Container my="12">
======SIMILARITY SCORE 313.80012531328316======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
Stripped:  }, 250); setTimerId(id); } if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text>
======SIMILARITY SCORE 368.7763713080169======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      }, 250);
      setTimerId(id);
    }
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
Stripped:  }, 250); setTimerId(id); } if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container>
======SIMILARITY SCORE 514.1719359110664======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
Stripped:  setTimerId(id);
======SIMILARITY SCORE 342.83502252252254======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
Stripped:  setTimerId(id); }
======SIMILARITY SCORE 209.5016891891892======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
Stripped:  setTimerId(id); }
======SIMILARITY SCORE 397.39625989625995======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
    if(isLoading) {
Stripped:  setTimerId(id); } if(isLoading) {
======SIMILARITY SCORE 475.6648050765698======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
    if(isLoading) {
      return (
Stripped:  setTimerId(id); } if(isLoading) { return (
======SIMILARITY SCORE 452.3283621549517======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
    if(isLoading) {
      return (
        <Container my="12">
Stripped:  setTimerId(id); } if(isLoading) { return ( <Container my="12">
======SIMILARITY SCORE 435.06434218796517======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
Stripped:  setTimerId(id); } if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text>
======SIMILARITY SCORE 490.06638217164533======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
Stripped:  setTimerId(id); } if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container>
======SIMILARITY SCORE 442.72179788484135======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      setTimerId(id);
    }
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
Stripped:  setTimerId(id); } if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> )
======SIMILARITY SCORE 133.33333333333337======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
Stripped:  }
======SIMILARITY SCORE 197.44318181818184======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    if(isLoading) {
Stripped:  } if(isLoading) {
======SIMILARITY SCORE 278.30806662923453======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    if(isLoading) {
      return (
Stripped:  } if(isLoading) { return (
======SIMILARITY SCORE 257.5208231259187======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    if(isLoading) {
      return (
        <Container my="12">
Stripped:  } if(isLoading) { return ( <Container my="12">
======SIMILARITY SCORE 243.69214493520232======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
Stripped:  } if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text>
======SIMILARITY SCORE 298.7421383647799======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
Stripped:  } if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container>
======SIMILARITY SCORE 251.46028037383178======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
Stripped:  } if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> )
======SIMILARITY SCORE 165.74074074074076======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
Stripped:  } if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) }
======SIMILARITY SCORE 196.10389610389612======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
Stripped:  if(isLoading) {
======SIMILARITY SCORE 277.15099715099717======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
Stripped:  if(isLoading) { return (
======SIMILARITY SCORE 256.575682382134======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
        <Container my="12">
Stripped:  if(isLoading) { return ( <Container my="12">
======SIMILARITY SCORE 244.02885386053967======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
Stripped:  if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text>
======SIMILARITY SCORE 299.04761904761904======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
Stripped:  if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container>
======SIMILARITY SCORE 251.7688679245283======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
Stripped:  if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> )
======SIMILARITY SCORE 166.04361370716515======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
Stripped:  if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) }
======SIMILARITY SCORE 170.64131485659038======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
Stripped:  if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) }
======SIMILARITY SCORE 310.3896103896104======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
Stripped:  if(isLoading) {
======SIMILARITY SCORE 391.43671143671145======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
Stripped:  if(isLoading) { return (
======SIMILARITY SCORE 370.8613966678483======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
        <Container my="12">
Stripped:  if(isLoading) { return ( <Container my="12">
======SIMILARITY SCORE 358.3145681462539======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
Stripped:  if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text>
======SIMILARITY SCORE 413.33333333333337======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
Stripped:  if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container>
======SIMILARITY SCORE 366.0545822102426======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
Stripped:  if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> )
======SIMILARITY SCORE 280.3293279928794======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
Stripped:  if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) }
======SIMILARITY SCORE 284.92702914230466======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
Stripped:  if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) }
======SIMILARITY SCORE 362.78892601762556======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    if(isLoading) {
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
    return (
Stripped:  if(isLoading) { return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) } return (
======SIMILARITY SCORE 403.1889678948503======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      return (
Stripped:  return (
======SIMILARITY SCORE 385.6852979155138======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      return (
        <Container my="12">
Stripped:  return ( <Container my="12">
======SIMILARITY SCORE 375.90384801783466======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
Stripped:  return ( <Container my="12"> <Text>Your quiz is being loaded...</Text>
======SIMILARITY SCORE 431.958762886598======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
Stripped:  return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container>
======SIMILARITY SCORE 384.73639455782313======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
Stripped:  return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> )
======SIMILARITY SCORE 298.9898989898991======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
Stripped:  return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) }
======SIMILARITY SCORE 303.5876001393243======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
Stripped:  return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) }
======SIMILARITY SCORE 382.3997910954433======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
    return (
Stripped:  return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) } return (
======SIMILARITY SCORE 396.70168304529545======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      return (
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
    return (
        <Container my="12">
Stripped:  return ( <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) } return ( <Container my="12">
======SIMILARITY SCORE 312.8443649373882======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
Stripped:  <Container my="12">
======SIMILARITY SCORE 309.36352509179926======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
Stripped:  <Container my="12"> <Text>Your quiz is being loaded...</Text>
======SIMILARITY SCORE 365.623297716321======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
Stripped:  <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container>
======SIMILARITY SCORE 318.4639659246362======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
Stripped:  <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> )
======SIMILARITY SCORE 232.73040482342813======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
Stripped:  <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) }
======SIMILARITY SCORE 237.32810597285336======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
Stripped:  <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) }
======SIMILARITY SCORE 316.2866883797116======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
    return (
Stripped:  <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) } return (
======SIMILARITY SCORE 331.72933318015464======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
    return (
        <Container my="12">
Stripped:  <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) } return ( <Container my="12">
======SIMILARITY SCORE 239.3311773751209======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
Stripped:  <Container my="12"> <Text>Your quiz is being loaded...</Text> </Container> ) } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
======SIMILARITY SCORE 341.31971720345643======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          <Text>Your quiz is being loaded...</Text>
Stripped:  <Text>Your quiz is being loaded...</Text>
======SIMILARITY SCORE 401.4473089099955======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          <Text>Your quiz is being loaded...</Text>
        </Container>
Stripped:  <Text>Your quiz is being loaded...</Text> </Container>
======SIMILARITY SCORE 354.36533649119673======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
Stripped:  <Text>Your quiz is being loaded...</Text> </Container> )
======SIMILARITY SCORE 268.58017604286266======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
Stripped:  <Text>Your quiz is being loaded...</Text> </Container> ) }
======SIMILARITY SCORE 273.1778771922879======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
Stripped:  <Text>Your quiz is being loaded...</Text> </Container> ) }
======SIMILARITY SCORE 352.15450231381806======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
    return (
Stripped:  <Text>Your quiz is being loaded...</Text> </Container> ) } return (
======SIMILARITY SCORE 368.5801760428626======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
    return (
        <Container my="12">
Stripped:  <Text>Your quiz is being loaded...</Text> </Container> ) } return ( <Container my="12">
======SIMILARITY SCORE 275.3926446200371======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
Stripped:  <Text>Your quiz is being loaded...</Text> </Container> ) } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
======SIMILARITY SCORE 339.11158294553036======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
          <Text>Your quiz is being loaded...</Text>
        </Container>
      )
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
Stripped:  <Text>Your quiz is being loaded...</Text> </Container> ) } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch">
======SIMILARITY SCORE 363.0081300813008======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        </Container>
Stripped:  </Container>
======SIMILARITY SCORE 316.48333333333335======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        </Container>
      )
Stripped:  </Container> )
======SIMILARITY SCORE 230.83989501312337======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        </Container>
      )
    }
Stripped:  </Container> ) }
======SIMILARITY SCORE 235.4375961625486======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        </Container>
      )
    }
Stripped:  </Container> ) }
======SIMILARITY SCORE 321.6083730789613======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        </Container>
      )
    }
    return (
Stripped:  </Container> ) } return (
======SIMILARITY SCORE 341.025641025641======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        </Container>
      )
    }
    return (
        <Container my="12">
Stripped:  </Container> ) } return ( <Container my="12">
======SIMILARITY SCORE 256.3131313131313======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        </Container>
      )
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
Stripped:  </Container> ) } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
======SIMILARITY SCORE 319.377569441284======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        </Container>
      )
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
Stripped:  </Container> ) } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch">
======SIMILARITY SCORE 354.55026455026456======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        </Container>
      )
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
Stripped:  </Container> ) } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished
======SIMILARITY SCORE 264.0139751552795======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      )
Stripped:  )
======SIMILARITY SCORE 180.32036613272317======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      )
    }
Stripped:  ) }
======SIMILARITY SCORE 184.9180672821484======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      )
    }
Stripped:  ) }
======SIMILARITY SCORE 274.32862342724485======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      )
    }
    return (
Stripped:  ) } return (
======SIMILARITY SCORE 296.62511401641837======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      )
    }
    return (
        <Container my="12">
Stripped:  ) } return ( <Container my="12">
======SIMILARITY SCORE 217.42691071462943======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      )
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
Stripped:  ) } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
======SIMILARITY SCORE 280.9021573688042======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      )
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
Stripped:  ) } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch">
======SIMILARITY SCORE 316.0070810805047======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      )
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
Stripped:  ) } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished
======SIMILARITY SCORE 198.92072623569476======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
      )
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
Stripped:  ) } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
======SIMILARITY SCORE 133.33333333333337======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
Stripped:  }
======SIMILARITY SCORE 137.9310344827586======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
Stripped:  }
======SIMILARITY SCORE 229.43935671208396======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    return (
Stripped:  } return (
======SIMILARITY SCORE 252.0458265139116======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    return (
        <Container my="12">
Stripped:  } return ( <Container my="12">
======SIMILARITY SCORE 174.2302543507363======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
Stripped:  } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
======SIMILARITY SCORE 237.64728422262667======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
Stripped:  } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch">
======SIMILARITY SCORE 272.74074074074076======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
Stripped:  } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished
======SIMILARITY SCORE 155.59344510751163======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
Stripped:  } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
======SIMILARITY SCORE 253.7675606641124======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    }
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
Stripped:  } return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted
======SIMILARITY SCORE 137.9310344827586======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===

Stripped:  
======SIMILARITY SCORE 229.6615943674767======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
Stripped:  return (
======SIMILARITY SCORE 252.35196458218041======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
Stripped:  return ( <Container my="12">
======SIMILARITY SCORE 174.51641925326135======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
Stripped:  return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
======SIMILARITY SCORE 237.8738182519776======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
Stripped:  return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch">
======SIMILARITY SCORE 272.9555058414119======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
Stripped:  return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished
======SIMILARITY SCORE 155.74597733980767======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
Stripped:  return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
======SIMILARITY SCORE 253.91460597244804======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
Stripped:  return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted
======SIMILARITY SCORE 197.18309859154928======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
Stripped:  return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}>
======SIMILARITY SCORE 372.51873722461954======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
Stripped:  return (
======SIMILARITY SCORE 395.20910743932325======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
Stripped:  return ( <Container my="12">
======SIMILARITY SCORE 317.37356211040424======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
Stripped:  return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
======SIMILARITY SCORE 380.73096110912047======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
Stripped:  return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch">
======SIMILARITY SCORE 415.81264869855477======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
Stripped:  return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished
======SIMILARITY SCORE 298.6031201969505======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
Stripped:  return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
======SIMILARITY SCORE 396.7717488295909======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
Stripped:  return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted
======SIMILARITY SCORE 340.0402414486921======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
Stripped:  return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}>
======SIMILARITY SCORE 352.1697814380741======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    return (
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
Stripped:  return ( <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center">
======SIMILARITY SCORE 312.8443649373882======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
Stripped:  <Container my="12">
======SIMILARITY SCORE 243.11011226195907======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
Stripped:  <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
======SIMILARITY SCORE 307.24689391525965======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
Stripped:  <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch">
======SIMILARITY SCORE 343.7261756807907======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
Stripped:  <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished
======SIMILARITY SCORE 226.21968357586474======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
Stripped:  <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
======SIMILARITY SCORE 324.3622256868261======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
Stripped:  <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted
======SIMILARITY SCORE 267.55850478477356======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
Stripped:  <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}>
======SIMILARITY SCORE 279.6399223211809======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
Stripped:  <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center">
======SIMILARITY SCORE 228.42882709527697======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        <Container my="12">
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
Stripped:  <Container my="12"> {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
======SIMILARITY SCORE 233.01053346924903======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
Stripped:  {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
======SIMILARITY SCORE 299.24851523562234======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
Stripped:  {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch">
======SIMILARITY SCORE 335.68773234200745======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
Stripped:  {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished
======SIMILARITY SCORE 217.4074074074074======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
Stripped:  {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
======SIMILARITY SCORE 315.4827517910682======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
Stripped:  {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted
======SIMILARITY SCORE 258.50004401819064======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
Stripped:  {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}>
======SIMILARITY SCORE 270.46132733336526======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
Stripped:  {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center">
======SIMILARITY SCORE 219.00606462861455======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
Stripped:  {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
======SIMILARITY SCORE 238.92713821348963======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */}
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  {/* Quiz started: {quizStarted ? "True" : "False"} and Quiz finished: {quizFinished ? "True" : "False"} */} <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 319.6376153201006======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            <VStack spacing={6} align="stretch">
Stripped:  <VStack spacing={6} align="stretch">
======SIMILARITY SCORE 363.0621693121693======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            <VStack spacing={6} align="stretch">
                {quizFinished
Stripped:  <VStack spacing={6} align="stretch"> {quizFinished
======SIMILARITY SCORE 255.39021164021165======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
Stripped:  <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
======SIMILARITY SCORE 353.2262768991444======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
Stripped:  <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted
======SIMILARITY SCORE 295.2900360641357======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
Stripped:  <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}>
======SIMILARITY SCORE 308.0522582513029======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
Stripped:  <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center">
======SIMILARITY SCORE 255.5328561460128======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
Stripped:  <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
======SIMILARITY SCORE 275.30791692280667======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 122.76554404145078======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            <VStack spacing={6} align="stretch">
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  <VStack spacing={6} align="stretch"> {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 302.9271206690562======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                {quizFinished
Stripped:  {quizFinished
======SIMILARITY SCORE 204.7889750215332======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
Stripped:  {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
======SIMILARITY SCORE 302.6435108501063======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
Stripped:  {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted
======SIMILARITY SCORE 244.41090990386766======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
Stripped:  {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}>
======SIMILARITY SCORE 257.30955767056855======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
Stripped:  {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center">
======SIMILARITY SCORE 205.33082016335607======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
Stripped:  {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
======SIMILARITY SCORE 225.0670465521614======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 242.33599442552247======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                {quizFinished
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  {quizFinished ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 258.95127536918585======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
Stripped:  ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
======SIMILARITY SCORE 358.9404411858302======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
Stripped:  ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted
======SIMILARITY SCORE 301.60045238752775======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
Stripped:  ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}>
======SIMILARITY SCORE 316.17149221711963======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
Stripped:  ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center">
======SIMILARITY SCORE 264.67430081620773======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
Stripped:  ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
======SIMILARITY SCORE 284.37369247386954======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 131.83131959251364======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 301.6426403472306======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 250.5952448603068======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box>
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
Stripped:  ? <Box textAlign="center"><Text fontSize="xl">Your score: {score.toFixed(2)}%</Text></Box> : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
======SIMILARITY SCORE 301.4914530884657======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    : quizStarted
Stripped:  : quizStarted
======SIMILARITY SCORE 252.0072817859538======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    : quizStarted
                        ? <VStack spacing={4}>
Stripped:  : quizStarted ? <VStack spacing={4}>
======SIMILARITY SCORE 270.94964835828625======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
Stripped:  : quizStarted ? <VStack spacing={4}> <Box textAlign="center">
======SIMILARITY SCORE 222.14787787695894======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
Stripped:  : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
======SIMILARITY SCORE 241.63571513629068======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 258.90466300965176======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 208.90429157383142======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
Stripped:  : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
======SIMILARITY SCORE 217.32513196877872======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                    : quizStarted
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
Stripped:  : quizStarted ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
======SIMILARITY SCORE 247.06404812576648======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        ? <VStack spacing={4}>
Stripped:  ? <VStack spacing={4}>
======SIMILARITY SCORE 269.1191209770222======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
Stripped:  ? <VStack spacing={4}> <Box textAlign="center">
======SIMILARITY SCORE 226.34394654698957======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
Stripped:  ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
======SIMILARITY SCORE 245.754154087527======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 263.0231019608881======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 212.6857951920747======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
Stripped:  ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
======SIMILARITY SCORE 221.01607454822192======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
Stripped:  ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
======SIMILARITY SCORE 259.5646420042049======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        ? <VStack spacing={4}>
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
Stripped:  ? <VStack spacing={4}> <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch">
======SIMILARITY SCORE 274.60685284214696======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Box textAlign="center">
Stripped:  <Box textAlign="center">
======SIMILARITY SCORE 234.76081672338358======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
Stripped:  <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
======SIMILARITY SCORE 254.0911083175594======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 101.54873543620349======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 271.36005619092043======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 222.36218228298515======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
Stripped:  <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
======SIMILARITY SCORE 231.09185394786965======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
Stripped:  <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
======SIMILARITY SCORE 269.47415329768273======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
Stripped:  <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch">
======SIMILARITY SCORE 235.80121703853956======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Box textAlign="center">
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
Stripped:  <Box textAlign="center"> <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
======SIMILARITY SCORE 247.80283353010628======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
Stripped:  <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
======SIMILARITY SCORE 267.1028124417955======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 114.56043956043958======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 284.37176031515656======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
Stripped:  <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box>
======SIMILARITY SCORE 237.61017739180937======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
Stripped:  <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
======SIMILARITY SCORE 247.6407248146379======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
Stripped:  <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
======SIMILARITY SCORE 285.8499203146723======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
Stripped:  <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch">
======SIMILARITY SCORE 252.85777440949855======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
Stripped:  <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
======SIMILARITY SCORE 280.64873722768465======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text>
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
Stripped:  <Text fontSize="2xl">Time Left: {formatTime(msRemaining)}</Text> </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex}
======SIMILARITY SCORE 175.96117630015934======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Box>
Stripped:  </Box>
======SIMILARITY SCORE 193.2301241735204======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Box>
Stripped:  </Box>
======SIMILARITY SCORE 166.81196219494996======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
Stripped:  </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
======SIMILARITY SCORE 178.4068105807237======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
Stripped:  </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
======SIMILARITY SCORE 216.86963979416814======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
Stripped:  </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch">
======SIMILARITY SCORE 186.2188756738256======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
Stripped:  </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
======SIMILARITY SCORE 213.70629370629374======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
Stripped:  </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex}
======SIMILARITY SCORE 232.44472191873476======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Box>
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
Stripped:  </Box> <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused}
======SIMILARITY SCORE 169.81132075471697======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===

Stripped:  
======SIMILARITY SCORE 146.66764050688386======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
======SIMILARITY SCORE 158.3917718560075======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
======SIMILARITY SCORE 197.46419175679625======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch">
======SIMILARITY SCORE 166.7189132706374======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
======SIMILARITY SCORE 194.15481832543446======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex}
======SIMILARITY SCORE 212.8646934460888======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused}
======SIMILARITY SCORE 137.32027704800572======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
======SIMILARITY SCORE 169.81132075471697======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===

Stripped:  
======SIMILARITY SCORE 146.66764050688386======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
======SIMILARITY SCORE 158.3917718560075======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
======SIMILARITY SCORE 197.46419175679625======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch">
======SIMILARITY SCORE 166.7189132706374======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
======SIMILARITY SCORE 194.15481832543446======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex}
======SIMILARITY SCORE 212.8646934460888======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused}
======SIMILARITY SCORE 137.32027704800572======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
======SIMILARITY SCORE 144.99819754866618======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
======SIMILARITY SCORE 215.89840973765305======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
======SIMILARITY SCORE 227.62254108677672======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
======SIMILARITY SCORE 266.6949609875655======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch">
======SIMILARITY SCORE 235.94968250140658======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
======SIMILARITY SCORE 263.38558755620363======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex}
======SIMILARITY SCORE 282.095462676858======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused}
======SIMILARITY SCORE 206.55104627877495======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
======SIMILARITY SCORE 214.22896677943538======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
======SIMILARITY SCORE 222.52046359827574======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}>
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
Stripped:  <Card borderWidth="1px" borderRadius="lg" borderColor={borderColor} p={4} width={700}> <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
======SIMILARITY SCORE 230.41055780249417======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
Stripped:  <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
======SIMILARITY SCORE 270.57913017215344======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
Stripped:  <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch">
======SIMILARITY SCORE 239.4136866992108======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
Stripped:  <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
======SIMILARITY SCORE 266.28485479578853======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
Stripped:  <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex}
======SIMILARITY SCORE 284.70913762434947======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
Stripped:  <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused}
======SIMILARITY SCORE 210.32806134213502======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
Stripped:  <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
======SIMILARITY SCORE 217.2393741298102======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
Stripped:  <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
======SIMILARITY SCORE 225.06545510549824======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
Stripped:  <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
======SIMILARITY SCORE 219.344787591657======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text>
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
Stripped:  <Text fontSize="lg">{quizData.questions[currentQuestionIndex]["question"]}</Text> <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
======SIMILARITY SCORE 252.05554384998138======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <VStack mt={2} align="stretch">
Stripped:  <VStack mt={2} align="stretch">
======SIMILARITY SCORE 232.94023539727374======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
Stripped:  <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
======SIMILARITY SCORE 263.159386934841======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
Stripped:  <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex}
======SIMILARITY SCORE 281.07196821158675======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
Stripped:  <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused}
======SIMILARITY SCORE 206.0240541393457======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
Stripped:  <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
======SIMILARITY SCORE 212.09133894718713======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
Stripped:  <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
======SIMILARITY SCORE 220.262543163269======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
Stripped:  <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
======SIMILARITY SCORE 214.0847900341571======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
Stripped:  <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
======SIMILARITY SCORE 233.79409252491655======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                <VStack mt={2} align="stretch">
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
Stripped:  <VStack mt={2} align="stretch"> {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button>
======SIMILARITY SCORE 243.25531804233628======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
Stripped:  {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
======SIMILARITY SCORE 275.4901960784314======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
Stripped:  {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex}
======SIMILARITY SCORE 293.04872673989325======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
Stripped:  {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused}
======SIMILARITY SCORE 217.2406964401705======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
Stripped:  {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
======SIMILARITY SCORE 223.35270953320912======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
Stripped:  {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
======SIMILARITY SCORE 231.2858653395133======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
Stripped:  {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
======SIMILARITY SCORE 224.87664104787822======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
Stripped:  {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
======SIMILARITY SCORE 244.5556827909769======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
Stripped:  {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button>
======SIMILARITY SCORE 252.34885620915034======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => (
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
Stripped:  {quizData.questions[currentQuestionIndex].answers.map((answerItem, answerIndex) => ( <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))}
======SIMILARITY SCORE 259.8583877995643======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        <Button key={answerIndex}
Stripped:  <Button key={answerIndex}
======SIMILARITY SCORE 287.39331297470835======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        <Button key={answerIndex}
                                            disabled={paused}
Stripped:  <Button key={answerIndex} disabled={paused}
======SIMILARITY SCORE 217.50632142829693======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
Stripped:  <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
======SIMILARITY SCORE 225.93317387837934======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
Stripped:  <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
======SIMILARITY SCORE 234.67255334805======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
Stripped:  <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
======SIMILARITY SCORE 227.80273534990513======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
Stripped:  <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
======SIMILARITY SCORE 247.3633798069116======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
Stripped:  <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button>
======SIMILARITY SCORE 255.17132458323903======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
Stripped:  <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))}
======SIMILARITY SCORE 265.09203814593036======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        <Button key={answerIndex}
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
Stripped:  <Button key={answerIndex} disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack>
======SIMILARITY SCORE 256.744563575959======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            disabled={paused}
Stripped:  disabled={paused}
======SIMILARITY SCORE 193.39503836077986======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
Stripped:  disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
======SIMILARITY SCORE 204.28977723498272======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
Stripped:  disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
======SIMILARITY SCORE 213.94983426121485======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
Stripped:  disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
======SIMILARITY SCORE 206.68356034209694======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
Stripped:  disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
======SIMILARITY SCORE 226.1932298808655======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
Stripped:  disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button>
======SIMILARITY SCORE 234.0045035609552======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
Stripped:  disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))}
======SIMILARITY SCORE 243.8778765094555======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
Stripped:  disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack>
======SIMILARITY SCORE 260.12610577827974======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            disabled={paused}
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
Stripped:  disabled={paused} backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack> </Card>
======SIMILARITY SCORE 202.3267351966698======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
Stripped:  backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
======SIMILARITY SCORE 213.18675867433296======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
Stripped:  backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
======SIMILARITY SCORE 222.76991319651142======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
Stripped:  backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
======SIMILARITY SCORE 215.30205770793523======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
Stripped:  backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
======SIMILARITY SCORE 234.78496752391948======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
Stripped:  backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button>
======SIMILARITY SCORE 242.60346756152128======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
Stripped:  backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))}
======SIMILARITY SCORE 252.45228339672707======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
Stripped:  backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack>
======SIMILARITY SCORE 268.6822544562316======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"}
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
Stripped:  backgroundColor={answers[currentQuestionIndex] === answerIndex ? "blue.100" : "gray.100"} variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack> </Card>
======SIMILARITY SCORE 221.95982529406632======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
Stripped:  variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
======SIMILARITY SCORE 230.6160865060093======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
Stripped:  variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
======SIMILARITY SCORE 224.00246855780892======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
Stripped:  variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
======SIMILARITY SCORE 243.23726344156026======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
Stripped:  variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button>
======SIMILARITY SCORE 251.0750833179987======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
Stripped:  variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))}
======SIMILARITY SCORE 260.6979719830015======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
Stripped:  variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack>
======SIMILARITY SCORE 276.760097323601======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
Stripped:  variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack> </Card>
======SIMILARITY SCORE 307.460060973183======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"}
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
                            {paused && <Text>
Stripped:  variant={answers[currentQuestionIndex] === answerIndex ? "solid" : "outline"} onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack> </Card> {paused && <Text>
======SIMILARITY SCORE 232.924679808598======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
Stripped:  onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
======SIMILARITY SCORE 230.69207699024335======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
Stripped:  onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
======SIMILARITY SCORE 249.6166384053708======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
Stripped:  onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button>
======SIMILARITY SCORE 257.49690797112424======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
Stripped:  onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))}
======SIMILARITY SCORE 266.8469873450623======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
Stripped:  onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack>
======SIMILARITY SCORE 282.71209750082994======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
Stripped:  onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack> </Card>
======SIMILARITY SCORE 314.5495193382518======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
                            {paused && <Text>
Stripped:  onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack> </Card> {paused && <Text>
======SIMILARITY SCORE 157.66765179658762======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}>
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
Stripped:  onClick={!paused ? () => setAnswer(answerIndex, currentQuestionIndex) : () => {}}> {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack> </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
======SIMILARITY SCORE 230.2407516147974======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
Stripped:  {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
======SIMILARITY SCORE 249.6426053916512======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
Stripped:  {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button>
======SIMILARITY SCORE 257.60535130082565======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
Stripped:  {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))}
======SIMILARITY SCORE 267.40779169445887======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
Stripped:  {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack>
======SIMILARITY SCORE 283.8113243442487======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
Stripped:  {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack> </Card>
======SIMILARITY SCORE 100.47799101091533======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
Stripped:  {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack> </Card>
======SIMILARITY SCORE 315.74662505170534======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
                            {paused && <Text>
Stripped:  {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack> </Card> {paused && <Text>
======SIMILARITY SCORE 157.72264259362095======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
Stripped:  {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack> </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
======SIMILARITY SCORE 273.5915624375668======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                            {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem}
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
Stripped:  {answers[currentQuestionIndex] == answerIndex ? "➡️" : ""} {answerItem} </Button> ))} </VStack> </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>}
======SIMILARITY SCORE 187.75121275121276======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        </Button>
Stripped:  </Button>
======SIMILARITY SCORE 198.30955334987593======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        </Button>
                                    ))}
Stripped:  </Button> ))}
======SIMILARITY SCORE 212.36127057022583======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        </Button>
                                    ))}
                                </VStack>
Stripped:  </Button> ))} </VStack>
======SIMILARITY SCORE 232.4124232574937======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
Stripped:  </Button> ))} </VStack> </Card>
======SIMILARITY SCORE 267.55494505494505======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
                            {paused && <Text>
Stripped:  </Button> ))} </VStack> </Card> {paused && <Text>
======SIMILARITY SCORE 122.03826053519307======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
Stripped:  </Button> ))} </VStack> </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
======SIMILARITY SCORE 237.85446923620222======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                        </Button>
                                    ))}
                                </VStack>
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
Stripped:  </Button> ))} </VStack> </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>}
======SIMILARITY SCORE 177.94059011164273======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    ))}
Stripped:  ))}
======SIMILARITY SCORE 194.5259042033236======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    ))}
                                </VStack>
Stripped:  ))} </VStack>
======SIMILARITY SCORE 215.15151515151518======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    ))}
                                </VStack>
                            </Card>
Stripped:  ))} </VStack> </Card>
======SIMILARITY SCORE 253.80086580086584======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    ))}
                                </VStack>
                            </Card>
                            {paused && <Text>
Stripped:  ))} </VStack> </Card> {paused && <Text>
======SIMILARITY SCORE 109.61321410540731======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    ))}
                                </VStack>
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
Stripped:  ))} </VStack> </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
======SIMILARITY SCORE 225.42384016652775======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    ))}
                                </VStack>
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
Stripped:  ))} </VStack> </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>}
======SIMILARITY SCORE 177.34828904647983======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                    ))}
                                </VStack>
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
Stripped:  ))} </VStack> </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
======SIMILARITY SCORE 208.42105263157896======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                </VStack>
Stripped:  </VStack>
======SIMILARITY SCORE 229.358552631579======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                </VStack>
                            </Card>
Stripped:  </VStack> </Card>
======SIMILARITY SCORE 268.55151577574077======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                </VStack>
                            </Card>
                            {paused && <Text>
Stripped:  </VStack> </Card> {paused && <Text>
======SIMILARITY SCORE 126.77762448508334======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                </VStack>
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
Stripped:  </VStack> </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
======SIMILARITY SCORE 242.5818644973088======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                </VStack>
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
Stripped:  </VStack> </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>}
======SIMILARITY SCORE 194.44181319440332======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                </VStack>
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
Stripped:  </VStack> </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
======SIMILARITY SCORE 252.06736974360246======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                                </VStack>
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
Stripped:  </VStack> </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"}
======SIMILARITY SCORE 208.02592223330012======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Card>
Stripped:  </Card>
======SIMILARITY SCORE 250.0700280112045======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Card>
                            {paused && <Text>
Stripped:  </Card> {paused && <Text>
======SIMILARITY SCORE 111.96619752195357======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
Stripped:  </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
======SIMILARITY SCORE 227.7534577930712======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
Stripped:  </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>}
======SIMILARITY SCORE 179.44418096978802======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
Stripped:  </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
======SIMILARITY SCORE 237.04685916340884======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
Stripped:  </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"}
======SIMILARITY SCORE 221.23576408397201======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Card>
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
Stripped:  </Card> {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button>
======SIMILARITY SCORE 226.7857142857143======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            {paused && <Text>
Stripped:  {paused && <Text>
======SIMILARITY SCORE 208.68972704316803======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
Stripped:  {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>}
======SIMILARITY SCORE 160.2363050483351======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
Stripped:  {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
======SIMILARITY SCORE 217.81925389418947======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
Stripped:  {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"}
======SIMILARITY SCORE 201.99402402585525======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
Stripped:  {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button>
======SIMILARITY SCORE 213.77391081824578======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
Stripped:  {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack>
======SIMILARITY SCORE 275.96604215456676======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            {paused && <Text>
Stripped:  {paused && <Text>
======SIMILARITY SCORE 142.0975057829629======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
Stripped:  {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
======SIMILARITY SCORE 257.87005491202046======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
Stripped:  {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>}
======SIMILARITY SCORE 209.41663291718757======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
Stripped:  {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
======SIMILARITY SCORE 266.99958176304193======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
Stripped:  {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"}
======SIMILARITY SCORE 251.1743518947077======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
Stripped:  {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button>
======SIMILARITY SCORE 262.9542386870982======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
Stripped:  {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack>
======SIMILARITY SCORE 233.66060992683103======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            {paused && <Text>
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
Stripped:  {paused && <Text> {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack> : <Box>
======SIMILARITY SCORE 131.5914392317645======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
Stripped:  {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
======SIMILARITY SCORE 247.33876867254335======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
Stripped:  {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>}
======SIMILARITY SCORE 198.6169642681263======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
Stripped:  {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
======SIMILARITY SCORE 256.17487612286357======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
Stripped:  {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"}
======SIMILARITY SCORE 240.3231681076757======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
Stripped:  {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button>
======SIMILARITY SCORE 252.0782001994758======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
Stripped:  {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack>
======SIMILARITY SCORE 222.76577265768822======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
Stripped:  {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack> : <Box>
======SIMILARITY SCORE 187.41515768451862======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`}
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
Stripped:  {answers[currentQuestionIndex] == quizData.questions[currentQuestionIndex]["correctAnswer"] ? "✅ You got the right answer!" : `❌ Wrong: the right answer is ${quizData.questions[currentQuestionIndex]["answers"][quizData.questions[currentQuestionIndex]["correctAnswer"]]}`} </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
======SIMILARITY SCORE 223.8314241207201======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Text>}
Stripped:  </Text>}
======SIMILARITY SCORE 205.79988432620007======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
Stripped:  </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
======SIMILARITY SCORE 263.5470332792372======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
Stripped:  </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"}
======SIMILARITY SCORE 246.84323639648244======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
Stripped:  </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button>
======SIMILARITY SCORE 260.24522493155644======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
Stripped:  </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack>
======SIMILARITY SCORE 230.30422884508482======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
Stripped:  </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack> : <Box>
======SIMILARITY SCORE 196.15548430881557======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Text>}
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
Stripped:  </Text>} <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
======SIMILARITY SCORE 167.79907884895485======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
======SIMILARITY SCORE 225.49835706462213======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"}
======SIMILARITY SCORE 208.72370266479663======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button>
======SIMILARITY SCORE 222.15517241379308======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack>
======SIMILARITY SCORE 192.16589861751152======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack> : <Box>
======SIMILARITY SCORE 157.89539286103795======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
======SIMILARITY SCORE 255.57146466773352======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea>
======SIMILARITY SCORE 248.4442401392774======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
======SIMILARITY SCORE 306.1435183549447======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"}
======SIMILARITY SCORE 289.3688639551192======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button>
======SIMILARITY SCORE 302.80033370411564======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack>
======SIMILARITY SCORE 272.8110599078341======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack> : <Box>
======SIMILARITY SCORE 238.5405541513605======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
======SIMILARITY SCORE 111.37292409355706======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
======SIMILARITY SCORE 336.21662595805606======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea>
======SIMILARITY SCORE 244.50840915357045======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}>
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
Stripped:  <Button colorScheme="blue" onClick={paused ? goToNextQuestion : determineScore}> {paused ? "Next" : "Submit"} </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
======SIMILARITY SCORE 265.53017436262644======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {paused ? "Next" : "Submit"}
Stripped:  {paused ? "Next" : "Submit"}
======SIMILARITY SCORE 251.60763708068322======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {paused ? "Next" : "Submit"}
                            </Button>
Stripped:  {paused ? "Next" : "Submit"} </Button>
======SIMILARITY SCORE 266.3507359018094======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
Stripped:  {paused ? "Next" : "Submit"} </Button> </VStack>
======SIMILARITY SCORE 236.32522599588467======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
Stripped:  {paused ? "Next" : "Submit"} </Button> </VStack> : <Box>
======SIMILARITY SCORE 212.25616687047818======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
Stripped:  {paused ? "Next" : "Submit"} </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
======SIMILARITY SCORE 309.66183017026856======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
Stripped:  {paused ? "Next" : "Submit"} </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea>
======SIMILARITY SCORE 222.78451058938867======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
Stripped:  {paused ? "Next" : "Submit"} </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
======SIMILARITY SCORE 246.151318491744======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                              {paused ? "Next" : "Submit"}
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
Stripped:  {paused ? "Next" : "Submit"} </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box>
======SIMILARITY SCORE 223.4885372286468======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Button>
Stripped:  </Button>
======SIMILARITY SCORE 241.2371753165507======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Button>
                        </VStack>
Stripped:  </Button> </VStack>
======SIMILARITY SCORE 214.3921637563967======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Button>
                        </VStack>
                        : <Box>
Stripped:  </Button> </VStack> : <Box>
======SIMILARITY SCORE 197.85367068528845======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
Stripped:  </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
======SIMILARITY SCORE 295.0441321713385======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
Stripped:  </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea>
======SIMILARITY SCORE 208.01739757344643======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
Stripped:  </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
======SIMILARITY SCORE 231.30316070748887======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
Stripped:  </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box>
======SIMILARITY SCORE 284.6863197893095======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                            </Button>
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
Stripped:  </Button> </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> }
======SIMILARITY SCORE 237.138165611072======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        </VStack>
Stripped:  </VStack>
======SIMILARITY SCORE 210.90561224489792======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        </VStack>
                        : <Box>
Stripped:  </VStack> : <Box>
======SIMILARITY SCORE 201.45009204658302======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
Stripped:  </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
======SIMILARITY SCORE 298.56194164161434======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
Stripped:  </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea>
======SIMILARITY SCORE 211.50785722214295======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
Stripped:  </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
======SIMILARITY SCORE 234.7650336098831======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
Stripped:  </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box>
======SIMILARITY SCORE 288.1403888989224======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
Stripped:  </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> }
======SIMILARITY SCORE 312.03845185763356======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        </VStack>
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
Stripped:  </VStack> : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack>
======SIMILARITY SCORE 185.3807119674411======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        : <Box>
Stripped:  : <Box>
======SIMILARITY SCORE 182.46912206804444======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
Stripped:  : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
======SIMILARITY SCORE 279.49411455125994======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
Stripped:  : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea>
======SIMILARITY SCORE 192.4037324968176======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
Stripped:  : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
======SIMILARITY SCORE 215.63002518985337======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
Stripped:  : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box>
======SIMILARITY SCORE 268.99696048632217======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
Stripped:  : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> }
======SIMILARITY SCORE 292.8554081084105======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
Stripped:  : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack>
======SIMILARITY SCORE 319.76144422952933======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        : <Box>
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
        </Container>
Stripped:  : <Box> <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack> </Container>
======SIMILARITY SCORE 241.6290557879406======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
Stripped:  <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
======SIMILARITY SCORE 114.46142573013714======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
Stripped:  <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
======SIMILARITY SCORE 338.54413205093215======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
Stripped:  <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea>
======SIMILARITY SCORE 251.27683969147387======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
Stripped:  <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
======SIMILARITY SCORE 274.4653370179022======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
Stripped:  <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box>
======SIMILARITY SCORE 327.8219197412268======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
Stripped:  <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> }
======SIMILARITY SCORE 351.63135586432713======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
Stripped:  <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack>
======SIMILARITY SCORE 378.49309888447726======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
        </Container>
Stripped:  <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack> </Container>
======SIMILARITY SCORE 278.88293622820623======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}>
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
        </Container>
    )
Stripped:  <Textarea placeholder="Medication Information" value={medicationInfo} onChange={(e) => setMedicationInfo(e.target.value)}> </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack> </Container> )
======SIMILARITY SCORE 235.64251718667373======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
Stripped:  </Textarea>
======SIMILARITY SCORE 165.32356532356533======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
Stripped:  </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
======SIMILARITY SCORE 188.26530612244895======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
Stripped:  </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box>
======SIMILARITY SCORE 241.5584415584416======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
Stripped:  </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> }
======SIMILARITY SCORE 267.0150501672241======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
Stripped:  </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack>
======SIMILARITY SCORE 297.43589743589746======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
        </Container>
Stripped:  </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack> </Container>
======SIMILARITY SCORE 198.05680119581467======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
        </Container>
    )
Stripped:  </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack> </Container> )
======SIMILARITY SCORE 311.11421529988127======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
Stripped:  </Textarea>
======SIMILARITY SCORE 240.79526343677287======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
Stripped:  </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
======SIMILARITY SCORE 263.7370042356565======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
Stripped:  </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box>
======SIMILARITY SCORE 317.0301396716491======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
Stripped:  </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> }
======SIMILARITY SCORE 342.48674828043164======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
Stripped:  </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack>
======SIMILARITY SCORE 372.907595549105======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
        </Container>
Stripped:  </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack> </Container>
======SIMILARITY SCORE 273.5284993090222======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
        </Container>
    )
Stripped:  </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack> </Container> )
======SIMILARITY SCORE 106.58280922431865======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          </Textarea>
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
        </Container>
    )
}
Stripped:  </Textarea> <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack> </Container> ) }
======SIMILARITY SCORE 228.6855956347482======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
Stripped:  <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
======SIMILARITY SCORE 252.70301357257878======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
Stripped:  <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box>
======SIMILARITY SCORE 305.98224953063664======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
Stripped:  <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> }
======SIMILARITY SCORE 331.4962700055868======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
Stripped:  <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack>
======SIMILARITY SCORE 362.1034910508595======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
        </Container>
Stripped:  <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack> </Container>
======SIMILARITY SCORE 262.7611023345621======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                          <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button>
                        </Box> 
                }
            </VStack>
        </Container>
    )
Stripped:  <Button colorScheme="blue" onClick={startQuiz}>Start Quiz</Button> </Box> } </VStack> </Container> )
======SIMILARITY SCORE 185.40968487776993======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        </Box> 
Stripped:  </Box>
======SIMILARITY SCORE 240.6043268371178======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        </Box> 
                }
Stripped:  </Box> }
======SIMILARITY SCORE 269.7093561086849======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        </Box> 
                }
            </VStack>
Stripped:  </Box> } </VStack>
======SIMILARITY SCORE 307.66157227050246======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        </Box> 
                }
            </VStack>
        </Container>
Stripped:  </Box> } </VStack> </Container>
======SIMILARITY SCORE 208.77659574468083======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                        </Box> 
                }
            </VStack>
        </Container>
    )
Stripped:  </Box> } </VStack> </Container> )
======SIMILARITY SCORE 214.2857142857143======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                }
Stripped:  }
======SIMILARITY SCORE 245.68781183178905======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                }
            </VStack>
Stripped:  } </VStack>
======SIMILARITY SCORE 284.44444444444446======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                }
            </VStack>
        </Container>
Stripped:  } </VStack> </Container>
======SIMILARITY SCORE 185.6447688564477======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
                }
            </VStack>
        </Container>
    )
Stripped:  } </VStack> </Container> )
======SIMILARITY SCORE 299.85115550332944======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            </VStack>
Stripped:  </VStack>
======SIMILARITY SCORE 338.7658335026756======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            </VStack>
        </Container>
Stripped:  </VStack> </Container>
======SIMILARITY SCORE 239.97997997998======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
            </VStack>
        </Container>
    )
Stripped:  </VStack> </Container> )
======SIMILARITY SCORE 363.0081300813008======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        </Container>
Stripped:  </Container>
======SIMILARITY SCORE 264.4======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
        </Container>
    )
Stripped:  </Container> )
======SIMILARITY SCORE 216.0714285714286======
===SEARCH===
setScore(score);
         setQuizFinished(true);
         setIsModalOpen(true); // Open modal on quiz completion
         setPaused(true);
Stripped:  setScore(score); setQuizFinished(true); setIsModalOpen(true); // Open modal on quiz completion setPaused(true);
===MATCH===
    )
Stripped:  )
        setScore(score);
        // setQuizFinished(true);
        setPaused(true);
955.6782713085233
